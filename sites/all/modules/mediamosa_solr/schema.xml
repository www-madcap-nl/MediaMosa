<?xml version="1.0" encoding="UTF-8" ?>

<!-- $Id: $ -->

<!--
 This is the MediaMosa Solr schema file. This file should be named "schema.xml" 
 and should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default)
 or located where the classloader for the Solr webapp can find it.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml
-->

<schema name="mediamosa-2.3-asset" version="1.2">

  <!-- attribute "name" is the name of this schema and is only used for display purposes.
       Applications should change this to reflect the nature of the search collection.
       version="1.2" is Solr's version number for the schema syntax and semantics.  It should
       not normally be changed by applications.
       1.0: multiValued attribute did not exist, all fields are multiValued by nature
       1.1: multiValued attribute introduced, false by default 
       1.2: omitTermFreqAndPositions attribute introduced, true by default except for text fields.
     -->

  <types>
    <!-- 
      Each asset belongs to one app_id.
      -->
    <fieldType name="app_id" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>

    <!--
      We use a seperate type for MediaMosa asset_ids (sortable).
      -->
    <fieldType name="asset_id" class="solr.StrField" sortMissingLast="true" multiValued="FALSE" omitNorms="true"/>

    <!--
      Each asset can be in 0 or more collections (sortable).
      -->
    <fieldType name="coll_id" class="solr.StrField" sortMissingLast="true" multiValued="FALSE" omitNorms="true"/>

    <!--
      MediaMosa metadata types; (unsorted)
      -->
    <fieldType name="val_int" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="val_date" class="solr.TrieDateField" precisionStep="6" omitNorms="true" positionIncrementGap="0"/>
    <fieldType name="val_char" class="solr.TextField" positionIncrementGap="100">
      <!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
        words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
        so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
        Synonyms and stopwords are customized by external files, and stemming is enabled.
        Duplicate tokens at the same position (which may result from Stemmed Synonyms or
        WordDelim parts) are removed.
        -->
      <analyzer type="index">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
          add enablePositionIncrements=true in both the index and query
          analyzers to leave a 'gap' for more accurate phrase queries.
        -->
        <filter class="solr.StopFilterFactory"
          ignoreCase="true"
          words="stopwords.txt"
          enablePositionIncrements="true"
        />
        <filter class="solr.WordDelimiterFilterFactory"
          generateWordParts="1"
          generateNumberParts="1"
          catenateWords="1"
          catenateNumbers="1"
          catenateAll="0"
          splitOnCaseChange="1"
          preserveOriginal="1"
        />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
          ignoreCase="true"
          words="stopwords.txt"
          enablePositionIncrements="true"
        />
        <filter class="solr.WordDelimiterFilterFactory"
          generateWordParts="1"
          generateNumberParts="1"
          catenateWords="0"
          catenateNumbers="0"
          catenateAll="0"
          splitOnCaseChange="1"
          preserveOriginal="1"
        />
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <!--
      MediaMosa metadata types; (for sorting)
    -->
    <fieldType name="sval_int" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sval_date" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>
    <fieldType name="sval_char" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

    <!-- 
      A text field that only splits on whitespace for exact matching of words (reserved for future). 
    -->
    <fieldType name="val_char_exact" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>

    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
    <fieldType name="val_char_tight" class="solr.TextField" positionIncrementGap="100" >
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.SnowballPorterFilterFactory" language="English" protected="protwords.txt"/>
        <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
        <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A general unstemmed text field - good if one does not know the language of the field -->
    <fieldType name="val_char_gen" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- A general unstemmed text field that indexes tokens normally and also
         reversed (via ReversedWildcardFilterFactory), to enable more efficient leading wildcard queries. -->
    <fieldType name="val_char_rev" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" enablePositionIncrements="true" />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory"
                ignoreCase="true"
                words="stopwords.txt"
                enablePositionIncrements="true"
                />
        <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldtype name="val_char_phonetic" stored="false" indexed="true" class="solr.TextField" >
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
      </analyzer>
    </fieldtype>
   </types>



  <fields>
    <!-- Valid attributes for fields:
      name: mandatory - the name for the field
       type: mandatory - the name of a previously defined type from the <types> 
       section
      indexed: true if this field should be indexed (searchable or sortable)
      stored: true if this field should be retrievable
      compressed: [false] if this field should be stored using gzip compression
        (this will only apply if the field type is compressable; among
        the standard field types, only TextField and StrField are)
      multiValued: true if this field may contain multiple values per document
      omitNorms: (expert) set to true to omit the norms associated with
        this field (this disables length normalization and index-time
        boosting for the field, and saves some memory).  Only full-text
        fields or fields that need an index-time boost need norms.
      termVectors: [false] set to true to store the term vector for a
        given field.
        When using MoreLikeThis, fields used for similarity should be
        stored for best performance.
      termPositions: Store position information with the term vector.  
        This will increase storage costs.
      termOffsets: Store offset information with the term vector. This 
        will increase storage costs.
      default: a value that should be used if no value is specified
        when adding a document.
    -->

    <!--
      The app_id is always stored. (searchable, sortable)
      -->
    <field name="app_id" type="app_id" indexed="true" stored="false" required="true" multiValued="false" /> 

    <!--
      The asset_id is always stored. (searchable, sortable)
      -->
    <field name="asset_id" type="asset_id" indexed="true" stored="true" required="true" multiValued="false" /> 
    
    <!--
      The coll_id is optional. Asset can be in 0 or more collections. 
      (searchable, sortable)
      -->
    <field name="coll_id" type="coll_id" indexed="true" stored="false" required="false" multiValued="true" /> 

    <!--
      Because mediamosa supports custom metadata, we must use dynamic fields for
      all metadata, including dc, qdc and czp. 
      
      All metadata fields can be multivalued. However, sort fields in solr must
      be non-multi. Depending on the sort order, lo or hi field is used. These
      fields hold either the highest or the lowest value of the same field.
      -->
    
    <!-- Searchable fields -->
    <dynamicField name="*_vc" type="val_char" indexed="true" stored="false" multiValued="true"/>
    <dynamicField name="*_vi" type="val_int" indexed="true" stored="false" multiValued="true"/>
    <dynamicField name="*_vd" type="val_date" indexed="true" stored="false" multiValued="true"/>

    <!-- Sortable fields lo (asc searching) -->
    <dynamicField name="*_svc_lo" type="sval_char" indexed="true" stored="false" multiValued="false"/>
    <dynamicField name="*_svi_lo" type="sval_int" indexed="true" stored="false" multiValued="false"/>
    <dynamicField name="*_svd_lo" type="sval_date" indexed="true" stored="false" multiValued="false"/>

    <!-- Sortable fields hi (desc searching) -->
    <dynamicField name="*_svc_hi" type="sval_char" indexed="true" stored="false" multiValued="false"/>
    <dynamicField name="*_svi_hi" type="sval_int" indexed="true" stored="false" multiValued="false"/>
    <dynamicField name="*_svd_hi" type="sval_date" indexed="true" stored="false" multiValued="false"/>

   <!-- Uncommenting the following will create a "timestamp" field using
        a default value of "NOW" to indicate when each document was indexed.
     <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>
     -->
  </fields>

  <!-- Field to use to determine and enforce document uniqueness. 
    Unless this field is marked with required="false", it will be a required field
  -->
  <uniqueKey>asset_id</uniqueKey>

  <!-- field for the QueryParser to use when an explicit fieldname is absent -->
  <defaultSearchField>asset_id</defaultSearchField>

  <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
  <solrQueryParser defaultOperator="OR"/>
</schema>
