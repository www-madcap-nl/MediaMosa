<?php
// $Id$

/**
 * MediaMosa is a Full Featured, Webservice Oriented Media Management and
 * Distribution platform (http://www.vpcore.nl)
 *
 * Copyright (C) 2010 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * The MediaMosa Solr extension module.
 */

// Include my non-hooks.
module_load_include('inc', 'mediamosa_solr', 'mediamosa_solr');

define('MEDIAMOSA_SOLR_PERM_CONFIGURATION', 'administer mediamosa solr configuration');
define('MEDIAMOSA_SOLR_PERM_INDEXER', 'administer mediamosa solr indexer');

/**
 * Implementation of hook_mediamosa_search_engine().
 */
function mediamosa_solr_mediamosa_search_engine() {

  // Return the information about the default search engine.
  return array('mediamosa_solr' => array(
    'title' => t('MediaMosa Solr search'),
    'description' => t('The Lucene Solr search allows fast metadata search. This module allows MediaMosa to use Solr.'),
  ));
}

/**
 * Implement hook_menu().
 */
function mediamosa_solr_menu() {
  $items = array();

  $items['admin/mediamosa/config/solr'] = array(
    'title' => 'MediaMosa Solr',
    'description' => 'Lucene Solr allows you to use really fast metadata searching for MediaMosa, a lot faster than the default search used on your database.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_solr_settings'),
    'access arguments' => array(MEDIAMOSA_SOLR_PERM_CONFIGURATION),
  );

  $items['admin/mediamosa/config/solr/config'] = array(
    'title' => 'Configuration',
    'access arguments' => array(MEDIAMOSA_SOLR_PERM_CONFIGURATION),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/mediamosa/config/solr/indexer'] = array(
    'title' => 'Indexer',
    'description' => 'Rebuild or reindex the Solr database.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mediamosa_solr_indexer_form'),
    'access arguments' => array(MEDIAMOSA_SOLR_PERM_INDEXER),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implement hook_permission().
 */
function mediamosa_solr_permission() {

  return array(
    MEDIAMOSA_SOLR_PERM_CONFIGURATION => array(
      'title' => t('MediaMosa solr configuration administer permissions'),
      'description' => t('Manage the configuration of MediaMosa Solr module.')
    ),
    MEDIAMOSA_SOLR_PERM_INDEXER => array(
      'title' => t('MediaMosa solr indexes administer permissions'),
      'description' => t('Premits to refresh or to rebuild the Solr index.')
    ),
  );
}

/**
 * Implement hook_settings().
 */
function mediamosa_solr_settings() {

  $form['connection'] = array(
    '#type' => 'fieldset',
    '#title' => t('Server connection setup for Solr'),
    '#description' => t('Supply the server URL and other connecting related settings for Solr.'),
    '#collapsible' => TRUE,
    '#weight' => -5,
  );
  $form['connection']['mediamosa_solr_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#description' => t('Enter the URL of the Solr server. Example; http://solr.mediamosa.local:8983/mediamosa/ (jetty servlet) or http://solr.mediamosa.local:8080/mediamosa/ (tomcat servlet).  Port and path in the URL are required, if you are using the HTTP port (80) then you must supply it in the url (http://solr.mediamosa.local:80/mediamosa/).'),
    '#required' => TRUE,
    '#default_value' => MediaMosa_Solr_Apache_Solr_Service::mediamosaGetUrl(),
  );

  if (MediaMosa_Solr_Apache_Solr_Service::mediamosaGetUrl() != '') {
    $form['connection']['check_connection'] = array(
      '#type' => 'submit',
      '#value' => t('Check connection Solr'),
      '#submit' => array('_mediamosa_solr_ping_submit'),
      '#weight' => 1,
    );
    $form['connection']['check_connection_save'] = array(
      '#type' => 'checkbox',
      '#title' => t('Save URL when connection test was successful.'),
      '#default_value' => TRUE,
      '#weight' => 2,
    );
  }

  $form['#submit'] = array('mediamosa_solr_settings_submit');
  return system_settings_form($form);
}

/**
 * Implement hook_settings_submit().
 */
function mediamosa_solr_settings_submit(&$form_state, $form) {
  // Call the function we normally call when pressing the 'check connection
  // Solr' button.
  _mediamosa_solr_ping_submit($form_state, $form);
}

/**
 * Implements hook_cron().
 *
 * Calculate used diskspace.
 */
function mediamosa_solr_cron() {

  // No need to run statistics parsing in simpletest. Will call it directly
  // inside the test when needed.
  if (mediamosa::in_simpletest_sandbox()) {
    return;
  }

  try {
    // Do the statistics cron REST call for streaming statistics.
    mediamosa_http::do_internal_call_cron('internal/cron/solr', TRUE);
  }
  catch (Exception $e) {
    mediamosa_watchdog::log('Catch exception during cron: @function: @msg', array('@function' => __FUNCTION__, '@msg' => $e->getMessage()));
  }
}

/**
 * Implementation of hook_mediamosa_status_collect().
 *
 * @param boolean $reset
 *
 * @return array
 *   All the statuses in an array
 */
function mediamosa_solr_mediamosa_status_collect($reset = FALSE) {
  global $conf;

  $mediamosa_status_server = array();
  if (!$reset) {
    $mediamosa_status_server = variable_get('mediamosa_status_server_' . mediamosa::get_server_id(), array());
  }

  if (empty($mediamosa_status_server)) {
    $mediamosa_status_server = array('time' => REQUEST_TIME, 'statuses' => _mediamosa_solr_status_generate());
    variable_set('mediamosa_status_server_' . mediamosa::get_server_id(), $mediamosa_status_server);
  }

  return $mediamosa_status_server['statuses'];
}

/**
 * Implementation of hook_mediamosa_status_collect().
 *
 * @param array $reindex_info
 *
 * Keys in array;
 *  - asset_id:
 *    The asset to reindex.
 */
function mediamosa_solr_mediamosa_asset_reindex($reindex_info) {
  mediamosa_solr::prepare_reindex($reindex_info['asset_id']);
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_solr_mediamosa_register_rest_call() {

  $rest_calls = array();

  // Trigger for cron run.
  $rest_calls['solr/cron'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_solr_reindex_run',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_solr',
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_INTERNAL_ONLY,
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_3_0,
  );

  return $rest_calls;
}

/**
 * Show form for indexer.
 */
function _mediamosa_solr_indexer_form() {

  $form['rebuild'] = array(
    '#type' => 'fieldset',
    '#title' => t('Rebuild '),
    '#description' => t('Rebuilding the index of Solr will either replace or update the index.'),
    '#collapsible' => TRUE,
    '#weight' => -5,
  );

  $form['rebuild']['rebuild_index'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild index Solr'),
    //'#submit' => array('_mediamosa_solr_rebuild_submit'),
    '#weight' => 1,
  );
  $form['rebuild']['replace_index'] = array(
    '#type' => 'checkbox',
    '#title' => t('Completely rebuild the index by throwing away the current.'),
    '#default_value' => FALSE,
    '#weight' => 2,
  );

  return $form;
}

/**
 * Implement hook_form_submit().
 */
function _mediamosa_solr_indexer_form_submit(&$form_state, $form) {
  exit('foo');
}
