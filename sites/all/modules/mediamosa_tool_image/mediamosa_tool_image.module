<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice Oriented Media Management and
 * Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2011 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * Image tool module.
 */

// Constants.
/**
 * Mime type: image/tiff
 */
define('MEDIAMOSA_TOOL_IMAGE_MIME_TYPE_TIFF', 'image/tiff');

/**
 * Mime type: image/*
 */
define('MEDIAMOSA_TOOL_IMAGE_MIME_TYPE_ALL', 'image');

/**
 * Short id of the module.
 */
define('MEDIAMOSA_TOOL_IMAGE_ID', 'image');

/**
 * Key value separator.
 */
define('MEDIAMOSA_TOOL_IMAGE_KEY_VALUE_SEPARATOR', ':');

/**
 * Helper function to recognize mime type as transcode.
 */
function mediamosa_tool_image_is_recognized_as_transcode($mime_type) {
  $is_found = FALSE;

  switch ($mime_type) {
    case MEDIAMOSA_TOOL_IMAGE_MIME_TYPE_TIFF:
      $is_found = TRUE;
      break;
  }

  return $is_found;
}

/**
 * Implements hook_mediamosa_tool_is_recognized_as_transcode().
 */
function mediamosa_tool_image_mediamosa_tool_is_recognized_as_transcode($mime_type) {
  $is_found = mediamosa_tool_image_is_recognized_as_transcode($mime_type);
  return $is_found;
}

/**
 * Implements hook_mediamosa_tool_transcode().
 */
function mediamosa_tool_image_mediamosa_tool_transcode($mime_type) {
  $is_found = mediamosa_tool_image_is_recognized_as_transcode($mime_type);
  return ($is_found ? '/internal/job/$job_id/exec/image' : FALSE);
}

/**
 * Helper function to recognize mime type as analyse.
 */
function mediamosa_tool_image_is_recognized_as_analyse($mime_type) {
  $is_found = FALSE;

  $mime_parts = explode('/', $mime_type);
  if (isset($mime_parts[1]) && $mime_parts[0] == MEDIAMOSA_TOOL_IMAGE_MIME_TYPE_ALL) {
    $is_found = TRUE;
  }

  return $is_found;
}

/**
 * Implements hook_mediamosa_tool_is_recognized_as_analyse().
 */
function mediamosa_tool_image_mediamosa_tool_is_recognized_as_analyse($mime_type) {
  $is_found = mediamosa_tool_image_is_recognized_as_analyse($mime_type);
  return $is_found;
}

/**
 * Implements hook_mediamosa_tool_analyse().
 *
 * @param array $job_ext
 */
function mediamosa_tool_image_mediamosa_tool_analyse($job_ext) {
  $command_type = 'mediamosa_tool_image';

  $mapping_array = array(
    'file name'        => '',
    'file size'        => '',
    'mime type'        => '',
    'image size'       => '',
    'camera make'      => '',
    'camera model'     => '',
    'image timestamp'  => '',
    'image number'     => '',
    'exposure time'    => '',
    'aperture'         => '',
    'exposure bias'    => '',
    'flash'            => '',
    'flash bias'       => '',
    'focal length'     => '',
    'subject distance' => '',
    'iso speed'        => '',
    'exposure mode'    => '',
    'metering mode'    => '',
    'macro mode'       => '',
    'image quality'    => '',
    'exif resolution'  => '',
    'white balance'    => '',
    'thumbnail'        => '',
    'copyright'        => 'rights',
    'exif comment'     => 'description',
  );

  $app_id = $job_ext[mediamosa_job_db::APP_ID];
  $job_id = $job_ext[mediamosa_job_db::ID];
  $mediafile_id = $job_ext[mediamosa_job_db::MEDIAFILE_ID];
  $mediafile = mediamosa_asset_mediafile::get($mediafile_id);
  $asset_id = $mediafile[mediamosa_asset_mediafile_db::ASSET_ID];

  // Execute.
  $execution_string = strtr('exiv2 @mediafile_location', array(
    '@mediafile_location' => mediamosa_configuration_storage::mediafile_filename_get($mediafile),
  ));
  $output_array = array();
  $output_string = mediamosa_io::exec($execution_string, $output_array);
  $link_asset = mediamosa_job_server::get_asset_link($job_id);
  mediamosa_watchdog::log_mediafile($mediafile_id, 'Command for @command_type: @command ; returned output: @s_output - @a_output<br /><br />@link',
    array(
      '@command_type' => $command_type,
      '@command' => $execution_string,
      '@s_output' => $output_string,
      '@a_output' => print_r($output_array, TRUE),
      '@link' => $link_asset,
    )
  );

  // Parse.
  $parse_array = array();
  // Get full definitions.
  $metadata_definitions_full = mediamosa_asset_metadata_property::get_metadata_properties_full($app_id);
  $action = 'update';
  foreach ($output_array as $output_line) {
    if (strpos($output_line, MEDIAMOSA_TOOL_IMAGE_KEY_VALUE_SEPARATOR) !== FALSE) {
      list($key, $metadata_value) = explode(MEDIAMOSA_TOOL_IMAGE_KEY_VALUE_SEPARATOR, $output_line);
      $key = drupal_strtolower(trim($key));
      $metadata_value = trim($metadata_value);

      if ($metadata_value && isset($mapping_array[$key]) && $mapping_array[$key]) {
        $parse_array[$mapping_array[$key]] = array($metadata_value);
      }
    }
  }
  mediamosa_asset_metadata::metadata_create($asset_id, $metadata_definitions_full, $parse_array, $action);
}

/**
 * Implements hook_mediamosa_tool_analyse_options().
 */
function mediamosa_tool_image_mediamosa_tool_analyse_options() {
  return array(
    'name' => t('Image'),
    'description' => t('Image files like JPG, PNG, TIFF.'),
    'value' => MEDIAMOSA_TOOL_IMAGE_ID,
  );
}

/**
 * Get module id.
 * Implements hook_mediamosa_tool_get_id().
 */
function mediamosa_tool_image_mediamosa_tool_get_id() {
  return MEDIAMOSA_TOOL_IMAGE_ID;
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_tool_image_mediamosa_register_rest_call() {

  $rest_calls = array();

  $rest_calls['job/$job_id/exec/image'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_job_exec_image',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_tool_image',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_3_0,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_INTERNAL_ONLY,
    mediamosa_rest_call::NO_USER_ABORT => TRUE,
  );

  return $rest_calls;
}

/**
 * Implements hook_mediamosa_register_rest_call_doc().
 */
function mediamosa_tool_image_mediamosa_register_rest_call_doc() {

  $rest_calls = array();

  $rest_calls['job/$job_id/exec/image'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Start transcoding image.',
    mediamosa_rest_call::DESCRIPTION => 'Start transcoding image (eg. tiff).',
    mediamosa_rest_call::EXAMPLE_REQUEST => '',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => '',
  );

  return $rest_calls;
}
