<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice Oriented Media Management and
 * Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2011 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * PDF tool module.
 */

// Constants.
/**
 * Mime type: application/pdf
 */
define('MEDIAMOSA_TOOL_PDF_MIME_TYPE_PDF', 'application/pdf');

/**
 * Short id of the module.
 */
define('MEDIAMOSA_TOOL_PDF_ID', 'pdf');

/**
 * Key value separator.
 */
define('MEDIAMOSA_TOOL_PDF_KEY_VALUE_SEPARATOR', ':');

/**
 * Helper function to recognize mime type as transcode.
 */
function _mediamosa_tool_pdf_is_recognized_as_transcode($mime_type) {
  $is_found = FALSE;

  switch ($mime_type) {
    case MEDIAMOSA_TOOL_PDF_MIME_TYPE_PDF:
      $is_found = TRUE;
      break;
  }

  return $is_found;
}

/**
 * Implements hook_mediamosa_tool_is_recognized_as_transcode().
 */
function mediamosa_tool_pdf_mediamosa_tool_is_recognized_as_transcode($mime_type) {
  $is_found = _mediamosa_tool_pdf_is_recognized_as_transcode($mime_type);
  return $is_found;
}

/**
 * Implements hook_mediamosa_tool_transcode().
 */
function mediamosa_tool_pdf_mediamosa_tool_transcode($mime_type) {
  $is_found = _mediamosa_tool_pdf_is_recognized_as_transcode($mime_type);

  // Execution string.
  // Go to the subdirectory.
  // Create swf from pdf.
  // Copy the result to transcode directory.
  // Remove the temporary directory (and files).
  // Create status file.
  $execution_string = 'mkdir @file_location; cd @file_location; pdf2swf @mediafile_location -o @mediafile_id @params; cp @mediafile_id ../@mediafile_id.tool; cd ..; rm @file_location -r; { echo "Errors: none"; echo "Status: done"; echo "Progress: 1.000"; echo "Warnings: none"; } > @mediafile_id.status;';

  return ($is_found ? $execution_string : FALSE);
}

/**
 * Helper function to recognize mime type as analyse.
 */
function mediamosa_tool_pdf_is_recognized_as_analyse($mime_type) {
  $is_found = FALSE;

  switch ($mime_type) {
    case MEDIAMOSA_TOOL_PDF_MIME_TYPE_PDF:
      $is_found = TRUE;
      break;
  }

  return $is_found;
}

/**
 * Implements hook_mediamosa_tool_is_recognized_as_analyse().
 */
function mediamosa_tool_pdf_mediamosa_tool_is_recognized_as_analyse($mime_type) {
  $is_found = mediamosa_tool_pdf_is_recognized_as_analyse($mime_type);
  return $is_found;
}

/**
 * Implements hook_mediamosa_tool_analyse().
 *
 * @param array $job_ext
 */
function mediamosa_tool_pdf_mediamosa_tool_analyse($job_ext) {
  $command_type = 'mediamosa_tool_pdf';
  $tool_id = MEDIAMOSA_TOOL_PDF_ID;
  $execution_command = 'pdfinfo @mediafile_location';
  $separator = MEDIAMOSA_TOOL_PDF_KEY_VALUE_SEPARATOR;
  mediamosa_tool_mapping::tool_analyse($job_ext, $command_type, $tool_id, $execution_command, $separator);
}

/**
 * Implements hook_mediamosa_tool_analyse_options().
 */
function mediamosa_tool_pdf_mediamosa_tool_analyse_options() {
  return array(
    'name' => t('PDF'),
    'description' => t('PDF files'),
    'value' => MEDIAMOSA_TOOL_PDF_ID,
  );
}

/**
 * Get module id.
 * Implements hook_mediamosa_tool_iteration().
 */
function mediamosa_tool_pdf_mediamosa_tool_iteration() {
  return MEDIAMOSA_TOOL_PDF_ID;
}
