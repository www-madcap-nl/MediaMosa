<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2010 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * Core - Open source media management and distribution platform.
 */
define('MEDIAMOSA_MENU_PATH', '');// was mediamosa for menu hook.

// Default settings.
require_once 'mediamosa.settings.inc';

// Node types hook include.
require_once 'core/node/mediamosa_node.inc';
require_once 'core/node/mediamosa_node_mediamosa_app.inc';
require_once 'core/node/mediamosa_node_mediamosa_server.inc';
require_once 'core/node/mediamosa_node_mediamosa_transcode_profile.inc';

/**
 * Implement hook_requirements().
 */
function mediamosa_requirements($phase) {

  $requirements = array();

  if ($phase != 'runtime') {
    return $requirements;
  }

  // Check for Client Application presence.
  if (!mediamosa_app::get_number_of_apps()) {
    $requirements['no_apps_defined'] = array(
      'title' => t('Mediamosa Client Application'),
      'value' => 'No MediaMosa Client Applications defined. Please add one ' . l(t('here'), 'admin/mediamosa/config/app/add') . '.',
      'severity' => REQUIREMENT_WARNING,
    );
  }

  // We require PHP 5 or higher. Although Drupal 7 required 5.2.4 or higher,
  // in the future we might need even higher version of PHP than Drupal.
  if (version_compare(phpversion(), mediamosa_settings::MINIMUM_PHP_VERSION) < 0) {
    $requirements['php'] = array(
      'title' => t('PHP'),
      'value' => phpversion(),
      'description' => t('Your PHP installation does not meet the requirements for using the MediaMosa module. MediaMosa requires at least PHP %version.', array('%version' => mediamosa_settings::MINIMUM_PHP_VERSION)),
      'severity' => REQUIREMENT_ERROR
    );
  }

  // Make sure the mediamosa_server_id is set and not to long.
  // @TODO should be made as REST call to other servers.
  $mediamosa_installation_id = mediamosa::get_server_id();

  if (!isset($mediamosa_installation_id) || drupal_strlen($mediamosa_installation_id) == 0 || drupal_strlen($mediamosa_installation_id) > mediamosa_job_server_db::INSTALL_ID_LENGTH) {
    $requirements['mediamosa'] = array(
      'title' => t("MediaMosa installation ID ('mediamosa_installation_id')"),
      'value' => isset($mediamosa_installation_id) ? $mediamosa_installation_id : 'Not defined',
      'description' => t("The configuration setting in settings.php 'mediamosa_installation_id' is either not set or is too long, make sure its set and not longer than %length characters.", array('%length' => mediamosa_job_server_db::INSTALL_ID_LENGTH)),
      'severity' => REQUIREMENT_ERROR
    );
  }

  // In case there are no warnings and errors - remind about detailed mediamosa report.
  if (!count($requirements)) {
    $requirements['encourage_check_status'] = array(
      'title' => t('Mediamosa'),
      'value' => 'Installed. Detailed description of Mediamosa component status is ' . l(t('here'), 'admin/mediamosa') . '.',
      'severity' => REQUIREMENT_OK,
    );
  }

  return $requirements;
}

/**
 * Implements hook_permission().
 */
function mediamosa_permission() {
  return array(
    mediamosa_settings::MEDIAMOSA_PERMISSION_DELETE_MEDIAMOSA_JOBS =>  array(
      'title' => t('Delete jobs'),
      'description' => t('Users with this permission may delete jobs.'),
    ),
    mediamosa_settings::MEDIAMOSA_PERMISSION_DELETE_MEDIAMOSA_MEDIAFILES =>  array(
      'title' => t('Delete mediafiles'),
      'description' => t('Users with this permission may delete mediafiles.'),
    ),
    mediamosa_settings::MEDIAMOSA_PERMISSION_ANALYSE_MEDIAMOSA_MEDIAFILES =>  array(
      'title' => t('Analyse mediafiles'),
      'description' => t('Users with this permission may start analyse jobs for mediafiles.'),
    ),
    mediamosa_settings::MEDIAMOSA_PERMISSION_DOWNLOAD_MEDIAMOSA_MEDIAFILES =>  array(
      'title' => t('Download mediafiles'),
      'description' => t('Users with this permission may download mediafiles.'),
    ),
    'access mediamosa' =>  array(
      'title' => t('Access MediaMosa Administration'),
      'description' => t('Access MediaMosa pages.'),
    ),
    'access mediamosa config' =>  array(
      'title' => t('Access MediaMosa Configuration'),
      'description' => t('View the MediaMosa configuration, maintenance and other pages.'),
    ),
    'administer mediamosa' =>  array(
      'title' => t('Administer MediaMosa'),
      'description' => t('Administer rights Mediamosa.'),
    ),
  );
}

function mediamosa_init() {
  // Possible PHP 5.3 autoloader bug.
  require_once DRUPAL_ROOT . '/sites/all/modules/mediamosa/lib/mediamosa_debug.inc';

  // Create and get the core object.
  $mediamosa = mediamosa::get();

  // Now call the rest process function to process possible rest call.
  $mediamosa->process_rest();

  // If we get here, then no REST interface is on.

  // Need some fixes on CSS.
  drupal_add_css(drupal_get_path('module', 'mediamosa') . '/mediamosa.css', array('weight' => 10));
}

/**
 * The MediaMosa REST menu callback. (not implemented)
 */
function _mediamosa() {
  // Create and get the core object.
  $mediamosa = mediamosa::get();

  // Now call the rest process function to process possible rest call.
  $mediamosa->process_rest();

  // If our the URL didn't match, then at this point we return MENU_NOT_FOUND for drupal.
  return MENU_NOT_FOUND;
}

/**
 * Implements hook_block_info().
 */
function mediamosa_block_info() {
  // Set block.
  $blocks['mediamosa-version'] = array(
    'info' => t('MediaMosa version'),
    'weight' => '15',
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_theme().
 */
function mediamosa_theme() {
  return array(
    'mediamosa_version' => array(
      'variables' => array(
      ),
    ),
  );
}
/**
 * Format the MediaMosa version text.
 *
 * @ingroup themeable
 */
function theme_mediamosa_version($variables) {
  // Get version info.
  $version = mediamosa_version::get_current_version(TRUE);

  return strtr('<div style="text-align:center;"><span style="background-image: url(!logo);background-position:left center;background-repeat:no-repeat;padding-left:22px;">MediaMosa v!MAJOR.!MINOR.!RELEASE (build !BUILD)!EXTRA</span></div>',
    array(
      '!logo' => url(dirname(drupal_get_filename('module', 'mediamosa')) . '/lib/misc/mediamosa-logo-19x16.png'),
      '!MAJOR' => $version[mediamosa_version::MAJOR],
      '!MINOR' => $version[mediamosa_version::MINOR],
      '!RELEASE' => $version[mediamosa_version::RELEASE],
      '!BUILD' => $version[mediamosa_version::BUILD],
      '!EXTRA' => empty($version[mediamosa_version::EXTRA]) ? '' : ' - ' . $version[mediamosa_version::EXTRA],
    )
  );
}

/**
 * Implements hook_block_view().
 */
function mediamosa_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'mediamosa-version':
      $block['subject'] = NULL;
      $block['content'] = theme('mediamosa_version');
      return $block;
  }
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_mediamosa_register_rest_call() {

  $rest_calls = array();

  $rest_calls['rest'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_list',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_0_0,
  );

  $rest_calls['rest/$uri_id'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_get',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_0_0,
  );

  $rest_calls['version'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_mediamosa_version',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_1_6_1,
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
  );

  // These REST calls are only available during the sandbox of simpletest.
  if (mediamosa::in_simpletest_sandbox()) {
    $rest_calls['simpletest/whoami'][mediamosa_rest_call::METHOD_GET] = array(
      mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_simpletest_whoami',
      mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
      mediamosa_rest_call::MODULE_NAME => 'mediamosa',
      mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_1_0,
    );
  }

  return $rest_calls;
}

/**
 * Implements hook_mediamosa_register_rest_call_doc().
 */
function mediamosa_mediamosa_register_rest_call_doc() {

  $rest_calls = array();

  $rest_calls['rest'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Get listing MediaMosa REST calls.',
    mediamosa_rest_call::DESCRIPTION => 'Retrieve the listing of the current registered MediaMosa REST calls.',
    mediamosa_rest_call::EXAMPLE_REQUEST => 'rest?limit=10',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => '  <items>
<item id="1">
  <access>5</access>
  <behave_as_external></behave_as_external>
  <class_name>mediamosa_rest_call_asset_search</class_name>
  <default_params_values>
    <app_id>0</app_id>
  </default_params_values>
  <method>GET</method>
  <module_name>mediamosa_asset</module_name>
  <response_type>text/xml</response_type>
  <status>active</status>
  <uri>asset</uri>
  <uri_id>1</uri_id>
  <version>1.1.0</version>
</item>
</items>',
);

$rest_calls['rest/$uri_id'][mediamosa_rest_call::METHOD_GET] = array(
  mediamosa_rest_call::TITLE => 'Get details REST call.',
  mediamosa_rest_call::DESCRIPTION => 'Retrieve specific information about a registered MediaMosa REST call.',
  mediamosa_rest_call::EXAMPLE_REQUEST => 'rest/33',
  mediamosa_rest_call::RESPONSE_FIELDS => array(),
  mediamosa_rest_call::EXAMPLE_RESPONSE => '<items>
  <item id="1">
    <access>5</access>
    <behave_as_external></behave_as_external>
    <class_name>mediamosa_rest_call_aut_group_get</class_name>
    <method>GET</method>
    <module_name>mediamosa_aut</module_name>
    <response_type>text/xml</response_type>
    <status>active</status>
    <uri>autorisation_group/$groupname</uri>
    <uri_id>33</uri_id>
    <version>1.1.0</version>
    <vars>
      <groupname>
        <type>STRING</type>
        <is_required>YES</is_required>
        <description>The group name to retrieve</description>
      </groupname>
      <app_id>
        <type>APP_ID</type>
        <is_required>YES</is_required>
        <is_array>YES</is_array>
        <default_value>0</default_value>
        <description>The application ID.</description>
      </app_id>
      <is_app_admin>
        <type>BOOL</type>
        <is_required>NO</is_required>
        <description>NOT USED.</description>
        <default_value>false</default_value>
      </is_app_admin>
    </vars>
  </item>
</items>',
  );

  $rest_calls['version'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Get details REST call.',
    mediamosa_rest_call::DESCRIPTION => 'Retrieve the current version of MediaMosa.',
    mediamosa_rest_call::EXAMPLE_REQUEST => '/version [GET]',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => '<items>
  <item id="1">
    <version>2.1.0</version>
  </item>
</items>',
  );

  return $rest_calls;
}

/**
 * Implements hook_mediamosa_settings_collect().
 */
function mediamosa_mediamosa_configuration_collect() {
  $form['settings_cron'] = array(
    '#type' => 'fieldset',
    '#title' => t('MediaMosa internal CRON REST calls'),
    '#collapsible' => TRUE,
  );

  $form['settings_cron']['mediamosa_cron_url_app'] = array(
    '#type' => 'textfield',
    '#title' => t('URL REST'),
    '#description' => t('The URL or IP Address of the server to apply the call for CRON REST calls. For now its used to trigger update for the status page and where to run the status tests. This must be a MediaMosa REST interface or the admin URL (default http://localhost/), and open from this server, f.e. \'http://app.mediamosa.local\'. <br />Notes: <br /><em>Make sure you only trigger the CRON on one server, prefer where you host the admin interface.</em><br /><em>You must use http:// or other schema in this URL.</em>'),
    '#required' => TRUE,
    '#default_value' => variable_get('mediamosa_cron_url_app', 'http://localhost'),
  );

  $form['settings_cron']['mediamosa_cron_url_app_local'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use localhost with hostname.'),
    '#description' => t('Enable to use localhost and provide the call with the hostname. This option is useful when your server does not allow to call the host directy on localhost by hostname. Enabled will call localhost with the hostname in the HTTP header, allowing the call to go directly to localhost instead of going outside and back in. <b>Use only when this URL is on the same server where CRON is running. If you are not sure, then keep this setting unchecked.</b>'),
    '#default_value' => variable_get('mediamosa_cron_url_app_local', ''),
  );

  $form['settings_cron']['mediamosa_internal_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password used for internal REST calls.'),
    '#description' => t('This password allows usage of the internal REST calls. The password is autogenerated and should not be changed.'),
    '#default_value' => mediamosa::get_internal_password(),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements hook_mediamosa_configuration_validate().
 */
function mediamosa_mediamosa_configuration_validate($form, $form_state) {
  global $databases;

  // Use normal so schema might be empty.
  $parse_url = parse_url($form_state['values']['mediamosa_cron_url_app']);
  if (!isset($parse_url['scheme']) || !in_array($parse_url['scheme'], array('http', 'https'))) {
    form_set_error('mediamosa_cron_url_app', t("Include either 'http:// or 'https://' in URL Rest."));
  }

/*
  $mediamosa_simpletest_database = $form_state['values']['mediamosa_simpletest_database'];
  if ($mediamosa_simpletest_database != '' && empty($databases[$mediamosa_simpletest_database])) {
    form_set_error('mediamosa_simpletest_database', t("Database not enabled or does not match with mediamosa_simpletest db in /sites/mediamosa.settings.php."));
  }*/
}

/**
 * Implementation of hook_form_alter().
 */
function mediamosa_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'dblog_filter_form') {

    /**
     * Extend the watchdog filter.
     */
    if (!empty($_SESSION['mediamosa_watchdog_overview_filter'])) {
      $form['filters']['#collapsed'] = FALSE;
    }
    $form['filters']['mediamosa'] = array(
      '#prefix' => '<div id="mediamosa-dblog-filters">',
      '#suffix' => '</div>',
    );
    $form['filters']['mediamosa']['asset_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Asset ID'),
      '#size' => 32,
      '#maxlength' => 32,
      '#required' => FALSE,
      '#default_value' => empty($_SESSION['mediamosa_watchdog_overview_filter']['asset_id']) ? '' : $_SESSION['mediamosa_watchdog_overview_filter']['asset_id'],
    );
    $form['filters']['mediamosa']['mediafile_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Mediafile ID'),
      '#size' => 32,
      '#maxlength' => 32,
      '#required' => FALSE,
      '#default_value' => empty($_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id']) ? '' : $_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id'],
    );
    $form['filters']['mediamosa']['free_search'] = array(
      '#type' => 'textfield',
      '#title' => t('Free text search'),
      '#size' => 68,
      '#maxlength' => 100,
      '#required' => FALSE,
      '#default_value' => empty($_SESSION['mediamosa_watchdog_overview_filter']['free_search']) ? '' : $_SESSION['mediamosa_watchdog_overview_filter']['free_search'],
    );
    unset($form['#validate']);
    $form['#submit'][] = 'mediamosa_watchdog_filter_form_submit';
  }
}

/**
 * Submit of the watchdog filter form.
 */
function mediamosa_watchdog_filter_form_submit($form, &$form_state) {

  $op = $form_state['values']['op'];
  switch ($op) {
    case t('Filter'):
      $_SESSION['mediamosa_watchdog_overview_filter']['asset_id'] = $form_state['values']['asset_id'];
      $_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id'] = $form_state['values']['mediafile_id'];
      $_SESSION['mediamosa_watchdog_overview_filter']['free_search'] = $form_state['values']['free_search'];
      break;

    case t('Reset'):
      $_SESSION['mediamosa_watchdog_overview_filter'] = array();
      break;
  }
}

/**
 * Implementation of hook_query_alter().
 */
function mediamosa_query_alter(QueryAlterableInterface $query) {

  /**
   * Alter the search query on watchdog so we can search within the watchdog.
   *
   * @var QueryAlterableInterface $query
   *  The watchdog query object.
   */
  $tables = $query->getTables();
  foreach ($tables as $table) {
    if ($table['table'] == 'watchdog') {
      if (!empty($_SESSION['mediamosa_watchdog_overview_filter']['free_search'])) {
        $free_search = $_SESSION['mediamosa_watchdog_overview_filter']['free_search'];
        $or = db_or()
          ->condition('message', '%' . $free_search . '%', 'LIKE')
          ->condition('variables', '%' . $free_search . '%', 'LIKE');
        $query->condition($or);
      }
      if (!empty($_SESSION['mediamosa_watchdog_overview_filter']['asset_id']) || !empty($_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id'])) {
        $table_alias = $query->join(mediamosa_watchdog_db::TABLE_NAME, 'mw', 'w.wid = mw.wid');
        if (!empty($_SESSION['mediamosa_watchdog_overview_filter']['asset_id'])) {
          $query->condition(mediamosa_watchdog_db::ASSET_ID, '%' . $_SESSION['mediamosa_watchdog_overview_filter']['asset_id'] . '%', 'LIKE');
        }
        if (!empty($_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id'])) {
          $query->condition(mediamosa_watchdog_db::MEDIAFILE_ID, '%' . $_SESSION['mediamosa_watchdog_overview_filter']['mediafile_id'] . '%', 'LIKE');
        }
      }
    }
  }
}

/**
 * Implementation of hook_cron().
 */
function mediamosa_cron() {

  try {
    /*
     * Clean up our extra data on watchdog entries in mediamosa_watchdog.
     */
    $query = mediamosa_db::db_select('watchdog', 'w')
      ->fields('w', array('wid'))
      ->orderBy('wid', 'ASC')
      ->range(0, 1);
    $result = $query->execute();
    $lowest_wid = $result->fetchField();

    mediamosa_db::db_delete(mediamosa_watchdog_db::TABLE_NAME)
      ->condition('wid', $lowest_wid, '<')
      ->execute();
  }
  catch (Exception $e) {
    mediamosa_watchdog::log('Catch exception during cron: mediamosa_cron(): @msg', array('@msg' => $e->getMessage()));
  }
}
