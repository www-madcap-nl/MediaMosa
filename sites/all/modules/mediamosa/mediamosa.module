<?php
// $Id$

/**
 * MediaMosa is a Full Featured, Webservice Oriented Media Management and
 * Distribution platform (http://www.vpcore.nl)
 *
 * Copyright (C) 2009 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

 /**
  * @file
  * Core - Open source media management and distribution platform.
  */
define('MEDIAMOSA_PERM_REST_ACCESS', 'mediamosa_perm_rest_access');
define('MEDIAMOSA_MENU_PATH', 'mediamosa');
define('MEDIAMOSA_NODE_TYPE_TRANSCODE_PROFILE', 'mediamosa_transcode_profile');
define('MEDIAMOSA_NODE_TYPE_SERVER', 'mediamosa_server');

require_once 'mediamosa.settings.inc';

/**
 * Implement hook_requirements().
 */
function mediamosa_requirements($phase) {
  // Ensure translations don't break at install time
  $t = get_t();

  $a_requirements = array();

  if ($phase == 'runtime') {
    // We require PHP 5 or higher
    if (version_compare(phpversion(), mediamosa_settings::MINIMUM_PHP_VERSION) < 0) {
      $a_requirements['php'] = array(
        'title' => $t('PHP'),
        'value' => phpversion(),
        'description' => $t('Your PHP installation does not meet the requirements for using the MediaMosa module. MediaMosa requires at least PHP %version.', array('%version' => mediamosa_settings::MINIMUM_PHP_VERSION)),
        'severity' => REQUIREMENT_ERROR
      );
    }
  }

  return $a_requirements;
}

/**
 * Implement hook_menu().
 */
function mediamosa_menu() {
  $items = array();

  $items[MEDIAMOSA_MENU_PATH] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_mediamosa',
    'access arguments' => array(MEDIAMOSA_PERM_REST_ACCESS),
  );

  return $items;
}

/**
 * Implement hook_permission().
 */
function mediamosa_permission() {
  return array(
    MEDIAMOSA_PERM_REST_ACCESS =>  array(
      'title' => t('Access rest calls'),
      'description' => t('Users with this permission may access the MediaMosa restcalls.'),
    ),
  );
}

/**
 * The MediaMosa REST menu callback.
 */
function _mediamosa() {
  // Create and get the core object.
  $o_mediamosa = mediamosa::get();

  // Now call the rest process function to process possible rest call.
  $o_mediamosa->process_rest();

  // If our the URL didn't match, then at this point we return MENU_NOT_FOUND for drupal.
  return MENU_NOT_FOUND;
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_mediamosa_register_rest_call() {

  $a_rest_calls = array();

  $a_rest_calls['rest'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_list',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::DESCRIPTION => 'Retrieve the listing of the current registered MediaMosa REST calls.',
    mediamosa_rest_call::MODULE_NAME => 'mediamosa',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_0_0,
  );

  $a_rest_calls['rest/#$uri_id'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_get',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::DESCRIPTION => 'Retrieve specific information about an registered MediaMosa REST calls',
    mediamosa_rest_call::MODULE_NAME => 'mediamosa',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_0_0,
  );

  return $a_rest_calls;
}

/**
 * Implementation of hook_node_info().
 */
function mediamosa_node_info() {
  return array(
    MEDIAMOSA_NODE_TYPE_TRANSCODE_PROFILE => array(
      'name' => t('MediaMosa transcode profile'),
      'base' => MEDIAMOSA_NODE_TYPE_TRANSCODE_PROFILE,
      'has_body' => FALSE,
      'description' => t('@todo'),
    ),
    MEDIAMOSA_NODE_TYPE_SERVER => array(
      'name' => t('MediaMosa server'),
      'base' => MEDIAMOSA_NODE_TYPE_SERVER,
      'has_body' => FALSE,
      'description' => t('@todo'),
    ),
  );
}

/**
 * Implementation of hook_load().
 */
function mediamosa_transcode_profile_load(&$nodes) {
  $result = mediamosa_db::db_query(
    'SELECT * FROM {#table_name} WHERE nid IN (:nids)',
    array(
      '#table_name' => mediamosa_server_transcoding_profile_db::TABLE_NAME,
      ':nids' => array_keys($nodes),
    )
  );
  foreach ($result as $record) {
    foreach ($record as $key => $value) {
      if ($key == 'options') {
        $value = unserialize($value);
      }
      $nodes[$record['nid']]->$key = $value;
    }
  }
  return $nodes;
}

