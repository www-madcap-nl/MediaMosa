--
-- Copyright (c) 2008 Madcap BV (http://www.madcap.nl)
-- All rights reserved.
--
-- Permission is granted for use, copying, modification, distribution,
-- and distribution of modified versions of this work as long as the
-- above copyright notice is included.
--

-- VPX SAN/NAS path
local source_path = "\\\\xienix\\vpxdata\\data"
local destination_path = source_path .. "\\transcode"

-- Windows Media Encoder interface script location
local wmcmd = "c:/lua/WMCmd.vbs"

local status_file
local errors = {}
local log = ""

function transcode(hash, dst_ext, params)
  local logfile = hash .. "-" .. os.time()
  local command =
    string.format("cscript %s -input %s\\%s\\%s %s -output %s\\%s.%s > %s",
                  wmcmd, source_path, string.sub(hash, 1, 1), hash, params,
                  destination_path, hash, dst_ext, logfile)
  os.execute(command)

  for line in io.lines(logfile) do
    log = log .. line .. "\n"

    local error = string.match(line, "Error: (.*)")
    if error then
      table.insert(errors, error)
    end

    local error = string.match(line, "(Invalid parameter: .*)")
    if error then
      table.insert(errors, error)
    end

    local error = string.match(line, "(.*failed.*)")
    if error then
      table.insert(errors, error)
    end
  end

  os.remove(logfile)
end

local hash = arg[1]
local dst_ext = arg[2] or "avi"
local params = arg[3] or ""

status_file = destination_path .. "\\" .. hash .. ".status"

transcode(hash, dst_ext, params)

-- create a status file
fd = io.open(status_file, "w")
if next(errors) ~= nil then
  fd:write("Status: error\n")
  for _,e in pairs(errors) do
    fd:write("Errors: " .. e .. "\n")
  end
else
  fd:write("Status: done\n")
  fd:write("Progress: 1.000\n")
  fd:write("Errors: none\n")
  fd:write("Warnings: none\n")
end

fd:write("\n")
fd:write(log)
fd:close()
