<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2010 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

 /**
  * @file
  * Main core installer.
  */

// Node types.
require_once 'core/node/mediamosa_node.inc';

// Include the class we need. During install nothing can be autoloaded (yet).
require_once 'mediamosa.inc';
require_once 'lib/mediamosa_db.inc';
require_once 'core/error/mediamosa_error.install.inc';
require_once 'core/app/mediamosa_app.install.inc';
require_once 'core/aut/mediamosa_aut.install.inc';
require_once 'core/app/mediamosa_app.install.inc';
require_once 'core/asset/mediamosa_asset.install.inc';
require_once 'core/collection/mediamosa_collection.install.inc';
require_once 'core/ftp_batch/mediamosa_ftp_batch.install.inc';
require_once 'core/ftp_user/mediamosa_ftp_user.install.inc';
require_once 'core/job/mediamosa_job.install.inc';
require_once 'core/node/mediamosa_node.install.inc';
require_once 'core/server/mediamosa_server.install.inc';
require_once 'core/statistics/mediamosa_statistics.install.inc';
require_once 'core/ticket/mediamosa_ticket.install.inc';
require_once 'core/transcode/mediamosa_transcode.install.inc';
require_once 'core/user/mediamosa_user.install.inc';
require_once 'core/webservice/mediamosa_webservice.install.inc';

/**
 * Implements hook_install().
 */
function mediamosa_install() {

   // Install the error db.
  _mediamosa_error_install();

  // Install our node db.
  _mediamosa_node_install();

  // Install the app db.
  _mediamosa_app_install();

  // Install webservice db.
  _mediamosa_webservice_install();

  // Install the collection db.
  _mediamosa_collection_install();

  // Install the asset db.
  _mediamosa_asset_install();

  // Install the aut dbs.
  _mediamosa_aut_install();

  // Install the user dbs.
  _mediamosa_user_install();

  // Call installer ticket.
  _mediamosa_ticket_install();

  // Call installer ftp_batch.
  _mediamosa_ftp_batch_install();

  // Call installer Transcode.
  _mediamosa_transcode_install();

  // Call installer Job.
  _mediamosa_job_install(); // jobs before server.

  // Install the server db.
  _mediamosa_server_install();

  // Install the statistics db.
  _mediamosa_statistics_install();

  // Install the ftp_user table.
  _mediamosa_ftp_user_install();
}

/**
 * Implements hook_unstall().
 */
function mediamosa_uninstall() {
  // Remove the ftp_user table.
  _mediamosa_ftp_user_uninstall();

  // Remove the statistics db.
  _mediamosa_statistics_uninstall();

  // Remove the node db.
  _mediamosa_node_uninstall();

  // Remove the server db.
  _mediamosa_server_uninstall();

  // Remove Job.
  _mediamosa_job_uninstall();

  // Remove Transcode Profile.
  _mediamosa_transcode_uninstall();

  // Remove ftp_batch.
  _mediamosa_ftp_batch_uninstall();

  // Call uninstaller ticket.
  _mediamosa_ticket_uninstall();

  // Uninstall the user dbs.
  _mediamosa_user_uninstall();

  // Install the aut dbs.
  _mediamosa_aut_uninstall();

  // Remove the app db.
  _mediamosa_asset_uninstall();

  // Remove the collection db.
  _mediamosa_collection_uninstall();

  // Remove the webservice db.
  _mediamosa_webservice_uninstall();

  // Remove the app db.
  _mediamosa_app_uninstall();

  // Remove the error db.
  _mediamosa_error_uninstall();
}

/**
 * Change mediafile metadata STILL_TYPE ENUM value 'SECONDS' to 'SECOND'.
 */
function mediamosa_update_7000() {
  // Add 'SECOND' first
  db_change_field(
    mediamosa_asset_mediafile_metadata_db::TABLE_NAME,
    mediamosa_asset_mediafile_metadata_db::STILL_TYPE,
    mediamosa_asset_mediafile_metadata_db::STILL_TYPE,
    array(
      'description' => t('The type of the still.'),
      'type' => "enum('" . implode("','", array(mediamosa_asset_mediafile_metadata_db::STILL_TYPE_NONE, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_NORMAL, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_SECOND, 'SECONDS', mediamosa_asset_mediafile_metadata_db::STILL_TYPE_SCENE, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_PICTURE)) . "')",
      'mysql_type' => "enum('" . implode("','", array(mediamosa_asset_mediafile_metadata_db::STILL_TYPE_NONE, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_NORMAL, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_SECOND, 'SECONDS', mediamosa_asset_mediafile_metadata_db::STILL_TYPE_SCENE, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_PICTURE)) . "')",
      'default' => mediamosa_asset_mediafile_metadata_db::STILL_TYPE_NONE,
    )
  );

  // Then replace 'SECONDS' with 'SECOND'.
  db_query("UPDATE {mediamosa_asset_mediafile_metadata} SET still_type = 'SECOND' WHERE still_type = 'SECONDS'");

  // Now remove 'SECONDS'
  db_change_field(
    mediamosa_asset_mediafile_metadata_db::TABLE_NAME,
    mediamosa_asset_mediafile_metadata_db::STILL_TYPE,
    mediamosa_asset_mediafile_metadata_db::STILL_TYPE,
    array(
      'description' => t('The type of the still.'),
      'type' => "enum('" . implode("','", array(mediamosa_asset_mediafile_metadata_db::STILL_TYPE_NONE, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_NORMAL, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_SECOND, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_SCENE, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_PICTURE)) . "')",
      'mysql_type' => "enum('" . implode("','", array(mediamosa_asset_mediafile_metadata_db::STILL_TYPE_NONE, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_NORMAL, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_SECOND, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_SCENE, mediamosa_asset_mediafile_metadata_db::STILL_TYPE_PICTURE)) . "')",
      'default' => mediamosa_asset_mediafile_metadata_db::STILL_TYPE_NONE,
    )
  );
}

/**
 * Create new errorcode in database.
 */
function mediamosa_update_7001() {

  db_insert(mediamosa_error_db::TABLE_NAME)
    ->fields(array(
      mediamosa_error_db::NAME =>'ERRORCODE_TEST_RUNNING',
      mediamosa_error_db::MESSAGE => 'Timeout: test "@test" is currently running.',
      mediamosa_error_db::CODE => mediamosa_error::ERRORCODE_TEST_RUNNING,
    ))
  ->execute();

}

/**
 * Create "padding" transcode mapping.
 */
function mediamosa_update_7002() {
  $a_default_mappings = array(
    array('ffmpeg', 'padding', '', NULL, NULL, 'yes;no', 'yes', 'FALSE'),
  );

  // Insert default mappings as nodes.
  foreach ($a_default_mappings as $a_default_mapping) {
    $a_fields = array(
      mediamosa_transcode_mapping_db::TOOL => $a_default_mapping[0],
      mediamosa_transcode_mapping_db::NICE_PARAMETER => $a_default_mapping[1],
      mediamosa_transcode_mapping_db::TOOL_PARAMETER => $a_default_mapping[2],
      mediamosa_transcode_mapping_db::MIN_VALUE => $a_default_mapping[3],
      mediamosa_transcode_mapping_db::MAX_VALUE => $a_default_mapping[4],
      mediamosa_transcode_mapping_db::ALLOWED_VALUE => $a_default_mapping[5],
      mediamosa_transcode_mapping_db::DEFAULT_VALUE => $a_default_mapping[6],
      mediamosa_transcode_mapping_db::REQUIRED => $a_default_mapping[7],
    );

    // Add changed/created.
    $a_fields = mediamosa_db::db_insert_enrich($a_fields);

    // Insert it.
    db_insert(mediamosa_transcode_mapping_db::TABLE_NAME)
      ->fields($a_fields)
      ->execute();
  }
}

/**
 * Change HTTP_NOT_FOUND errorcode in database.
 */
function mediamosa_update_7003() {
  db_update(mediamosa_error_db::TABLE_NAME)
    ->fields(array(
      mediamosa_error_db::MESSAGE => 'Page not found: @uri (method: @method, parameters: @params)',
    ))
    ->condition(mediamosa_error_db::NAME, 'HTTP_NOT_FOUND')
    ->execute();
}

/**
 * Remove wrong foreign key.
 */
function mediamosa_update_7004() {

  try {
    db_query('ALTER TABLE {mediamosa_job_server_transcode} DROP FOREIGN KEY fk_mediamosa_job_server_transcode_jobserver_job_id');
  }
  catch (Exception $e) {
    // ignore.
  }

  try {
    db_query('ALTER TABLE {mediamosa_job_server_transcode} ADD CONSTRAINT `fk_mediamosa_job_server_transcode_jobserver_job_id` FOREIGN KEY (`jobserver_job_id`) REFERENCES `mediamosa_job_server` (`jobserver_job_id`)');
  }
  catch (Exception $e) {
    // ignore.
  }
}

/**
 * New error: ERRORCODE_STILL_NOT_IMAGE.
 */
function mediamosa_update_7005() {
  db_query('INSERT INTO {mediamosa_error} (name, code, message) VALUES (:name, :code, :message)', array(
    ':name' => 'ERRORCODE_STILL_NOT_IMAGE',
    ':code' => 1153,
    ':message' => 'MM - still is not an image for asset_id=@asset_id.',
  ));
}

/**
 * New error: ERRORCODE_UNKNOWN_JOB_STATUS and ERRORCODE_UNKNOWN_JOB_PROGRESS.
 */
function mediamosa_update_7006() {
  db_query('INSERT INTO {mediamosa_error} (name, code, message) VALUES (:name, :code, :message)', array(
    ':name' => 'ERRORCODE_UNKNOWN_JOB_STATUS',
    ':code' => 1154,
    ':message' => 'MediaMosa - unknown job status',
  ));
  db_query('INSERT INTO {mediamosa_error} (name, code, message) VALUES (:name, :code, :message)', array(
    ':name' => 'ERRORCODE_UNKNOWN_JOB_PROGRESS',
    ':code' => 1155,
    ':message' => 'MediaMosa - unknown job progress',
  ));
}
