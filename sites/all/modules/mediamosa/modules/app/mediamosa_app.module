<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2011 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * The Application module.
 */

/**
 * Implements hook_mediamosa_register_rest_call_doc().
 */
function mediamosa_app_mediamosa_register_rest_call_doc() {
  $rest_calls = array();

  // Get profile_id setting.
  $rest_calls['preview_profile_id'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Get the preview profile ID.',
    mediamosa_rest_call::DESCRIPTION => 'Get the preview profile ID.',
    mediamosa_rest_call::EXAMPLE_REQUEST => 'preview_profile_id',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => '<items>
  <item id="1">
    <preview_profile_id>1</preview_profile_id>
  </item>
</items>',
  );

  return $rest_calls;
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_app_mediamosa_register_rest_call() {
  $rest_calls = array();

  // Asset search.
  $rest_calls['preview_profile_id'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_app_get_default_transcode_profile',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_app',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_1_1_7,
  );

  return $rest_calls;
}

/**
 * Implements hook_help().
 */
function mediamosa_app_help($path, $arg) {

  switch ($path) {
    case 'admin/mediamosa/config/app':
      return '<p>' . t('List of client applications.') . '</p>';
    case 'admin/mediamosa/config/app/add':
      return '<p>' . t('Create client application by completing and submitting the form.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function mediamosa_app_menu() {
  $items = array();

  $items['admin/mediamosa/config/app'] = array(
    'title' => 'Client applications',
    'description' => 'List all MediaMosa End User Applications.',
    'page callback' => '_mediamosa_app_list',
    'access arguments' => array('access mediamosa'),
  );

  $items['admin/mediamosa/config/app/list'] = array(
    'title' => 'List',
    'access arguments' => array('access mediamosa'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_LIST,
  );

  $items['admin/mediamosa/config/app/add'] = array(
    'title' => 'Add',
    'page callback' => 'node_add',
    'page arguments' => array(mediamosa_node::MEDIAMOSA_NODE_TYPE_APP),
    'access callback' => 'node_access',
    'access arguments' => array('create', mediamosa_node::MEDIAMOSA_NODE_TYPE_APP),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_ADD,
  );

  $items['admin/mediamosa/config/app/%node'] = array(
    'page callback' => 'node_page_view',
    'page arguments' => array(4),
    'access callback' => 'node_access',
    'access arguments' => array('view', 4),
    'type' => MENU_CALLBACK,
  );
  $items['admin/mediamosa/config/app/%node/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_VIEW
  );

  $items['admin/mediamosa/config/app/%node/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'node_page_edit',
    'page arguments' => array(4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 4),
    'theme callback' => '_node_custom_theme',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_EDIT,
  );

  $items['admin/mediamosa/config/app/%node/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mediamosa_node_delete_confirm', 4),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 4),
    'theme callback' => '_node_custom_theme',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_DELETE,
  );

  $items['admin/mediamosa/config/app/%node/revisions'] = array(
    'title' => 'Revisions',
    'page callback' => '_mediamosa_node_revision_overview',
    'page arguments' => array(4),
    'access callback' => '_node_revision_access',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => mediamosa_settings::UI_TAB_WEIGHT_REVISIONS,
  );

  $items['admin/mediamosa/config/app/%/contacts'] = array(
    'title' => 'Client application contacts',
    'type' => MENU_CALLBACK,
    'page callback' => '_mediamosa_app_contacts',
    'page arguments' => array(4),
    'access arguments' => array('administer mediamosa config app'),
  );

  $items['admin/mediamosa/config/app/js/form'] = array(
    'page callback' => '_mediamosa_app_ajax_generate_shared_key',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mediamosa_app_permission() {
  return array(
    'administer mediamosa config app' =>  array(
      'title' => t('Adminster MediaMosa applications.'),
      'description' => t('Give administer rights for editing MediaMosa applications.'),
    ),
  );
}

/**
 * Show a listing of apps.
 */
function _mediamosa_app_list() {

  // Our header.
  $header = array(
    array('data' => t('App ID'), 'field' => 'a.' . mediamosa_app_db::APP_ID),
    array('data' => t('Name'), 'field' => 'a.' . mediamosa_app_db::APP_NAME),
    array('data' => t('Quota'), 'field' => 'a.' . mediamosa_app_db::QUOTA),
    t('Offline webservices'),
    array('data' => t('Owner'), 'field' => 'a.' . mediamosa_app_db::OWNER),
    array('data' => t('Status'), 'field' => 'a.' . mediamosa_app_db::ACTIVE),
    t('Contacts'),
    t('Operations')
  );

  // Get the app nodes.
  $result = mediamosa_db::db_select(mediamosa_app_db::TABLE_NAME, 'a')->extend('PagerDefault')->extend('TableSort')
    ->fields('a')
    ->limit(mediamosa_settings::maintenance_items_per_page())
    ->orderByHeader($header)
    ->execute();

  // Get all statuses of webservices per app.
  $a_webservice_statuses = mediamosa_webservice_app::webservice_get_all_status();

  // Get destination.
  $l_options = array('query' => drupal_get_destination());

  $apps = $rows = array();
  foreach ($result as $app) {
    $app_id = $app[mediamosa_app_db::APP_ID];

    $actions = array(
      l(t('Edit'), 'admin/mediamosa/config/app/' . $app[mediamosa_app_db::NID] . '/edit', $l_options),
      l(t('Delete'), 'admin/mediamosa/config/app/' . $app[mediamosa_app_db::NID] . '/delete', $l_options),
    );

    $a_offline_webservices = array();
    if (isset($a_webservice_statuses[$app_id])) {
      foreach ($a_webservice_statuses[$app_id] as $handle => $status) {
        if (!$status) {
          $a_offline_webservices[] = $handle;
        }
      }
    }

    $rows[] = array(
      $app[mediamosa_app_db::APP_ID],
      'title' => array('data' => l($app[mediamosa_app_db::APP_NAME], 'admin/mediamosa/config/app/' . $app[mediamosa_app_db::NID]), 'field' => $app[mediamosa_app_db::APP_NAME]),
      $app[mediamosa_app_db::QUOTA],
      implode(', ', $a_offline_webservices),
      $app[mediamosa_app_db::OWNER],
      $app[mediamosa_app_db::ACTIVE] == mediamosa_app_db::ACTIVE_TRUE ? t('Enabled') : t('<b>Disabled</b>'),
      l(t('Contacts'), 'admin/mediamosa/config/app/' . $app[mediamosa_app_db::APP_ID] . '/contacts'),
      implode(' | ', $actions),
    );
  }

  $form['pager_top'] = array('#theme' => 'pager');
  $form['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('You have no client applications. Click on the <em>Add</em> tab to create one.')
  );
  $form['pager_bottom'] = array('#theme' => 'pager');

  return $form;
}

/**
 * Show more specific information about a application.
 *
 * @param integer $app_id
 */
function _mediamosa_app_contacts($app_id) {
  // Reset the breadcrum.
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb[] = l(t('Administer'), 'admin');
  $breadcrumb[] = l(t('MediaMosa'), 'admin/mediamosa');
  $breadcrumb[] = l(t('Configuration'), 'admin/mediamosa/config');
  $breadcrumb[] = l(t('Client applications'), 'admin/mediamosa/config/app');
  drupal_set_breadcrumb($breadcrumb);

  $response = t('Technical and administrative contact for a client application.');

  $query = mediamosa_db::db_select(mediamosa_app_db::TABLE_NAME, 'a')->extend('PagerDefault');
  $result = $query
    ->fields('a')
    ->condition('a.app_id', $app_id)
    ->limit(mediamosa_settings::maintenance_items_per_page())
    ->execute();

  $apps = array();
  foreach ($result as $app) {
    $apps[] = array(
      $app[mediamosa_app_db::APP_ID],
      $app[mediamosa_app_db::TECHNICAL_NAME],
      $app[mediamosa_app_db::TECHNICAL_PHONE],
      $app[mediamosa_app_db::TECHNICAL_EMAIL],
      t('Technical'),
    );
    $apps[] = array(
      $app[mediamosa_app_db::APP_ID],
      $app[mediamosa_app_db::ADMINISTRATIVE_NAME],
      $app[mediamosa_app_db::ADMINISTRATIVE_PHONE],
      $app[mediamosa_app_db::ADMINISTRATIVE_EMAIL],
      t('Administrative'),
    );
  }

  $build['table'] = theme('table', array(
      'header' => array(t('Application ID'), t('Name'), t('Phone'), t('E-mail'), t('Type')),
      'rows' => $apps,
  ));

  return implode('', $build);
}
