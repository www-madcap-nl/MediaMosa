<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2011 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * The APP authentication module.
 */

/**
 * Implementation of hook_menu().
 */
function mediamosa_app_authentication_menu() {
  $items = array();

  // TODO remove:
  $items['admin/oauth_test'] = array(
    'title' => 'oAuth test',
    'page callback' => '_mediamosa_oauth_test',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  // TODO remove:
  $items['admin/oauth_test_phase2'] = array(
    'title' => 'oAuth test - page 2',
    'page callback' => '_mediamosa_oauth_test_phase2',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['login/oauth/authorize'] = array(
    'title' => 'oAuth authorization',
    'page callback' => '_mediamosa_oauth_authorize',
    'access arguments' => array('oauth login'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function mediamosa_app_authentication_permission() {
  return array(
    'oauth login' => array(
      'title' => t('Log in with oAuth'),
      'description' => t('Allow the user to log in a certain client application with oAuth.'),
    ),
  );
}

/**
 * Client authorization.
 * Menu callback function.
 */
function _mediamosa_oauth_authorize() {
  // TODO
  return 'I was here';
}

/**
 * Helper function for testing oAuth.
 * TODO: Remove.
 */
function _mediamosa_oauth_test() {
  $nid = arg(2);

  $output = '';
  $output .= 'Start...<br />' . PHP_EOL;


  // oAuth base parameters.

  // TODO: app url
  // $mediamosa_cron_url_app
  $callback_url = 'http://mediamosa/admin/oauth_test_phase2';

  $app = mediamosa_app::get_by_nid($nid);
  $consumer_key = $app['oauth_consumer_key'];
  $consumer_secret = $app['oauth_consumer_secret'];
  if (!$consumer_key || !$consumer_secret) {
    return t('Consumer key or secret is missing.');
  }

  $oauth_request_token = 'http://app1.mediamosa.local/login/oauth/request_token';
  $oauth_authorize = 'http://app1.mediamosa.local/login/oauth/authorize';
  $oauth_access_token = 'http://app1.mediamosa.local/login/oauth/access_token';

  $sig_method = new OAuthSignatureMethod_HMAC_SHA1();
  $test_consumer = new OAuthConsumer($consumer_key, $consumer_secret, $callback_url);


  // Request token.

  $req_req = OAuthRequest::from_consumer_and_token($test_consumer, NULL, 'GET', $oauth_request_token, array('oauth_callback' => $callback_url));
  $req_req->sign_request($sig_method, $test_consumer, NULL);


  // Request parameters.
  $url = $req_req->to_url();
  $headers = array();
  $method = 'GET';
  $data = NULL;
  $retry = 3;
  $response = drupal_http_request($url, $headers, $method, $data, $retry);

  $output .= '<pre>Request token: ' . print_r($response->data, TRUE) . '</pre><br />' . PHP_EOL;
  parse_str($response->data, $reqOAuthData);
  $output .= '<pre>Request token: ' . print_r($reqOAuthData, TRUE) . '</pre><br />' . PHP_EOL;


  // Access token.

  $req_token = new OAuthConsumer($reqOAuthData['oauth_token'], $reqOAuthData['oauth_token_secret'], $callback_url);

  $acc_req = OAuthRequest::from_consumer_and_token($test_consumer, $req_token, "GET", $oauth_authorize);
  $acc_req->sign_request($sig_method, $test_consumer, $req_token);

  $_SESSION['oauth_token'] = $reqOAuthData['oauth_token'];
  $_SESSION['oauth_token_secret'] = $reqOAuthData['oauth_token_secret'];

  header("Location: $acc_req");


  $output .= '... end.<br />' . PHP_EOL;
  return $output;
}

/**
 * Helper function for testing oAuth - page 2.
 * TODO: Remove.
 */
function _mediamosa_oauth_test_phase2() {
  $output = '';
  $output .= 'Start...<br />' . PHP_EOL;


  // oAuth base parameters.

  // TODO: app url
  // $mediamosa_cron_url_app
  $callback_url = 'http://mediamosa/admin/oauth_test_phase2';

  $app = mediamosa_app::get_by_nid($nid);
  $consumer_key = $app['oauth_consumer_key'];
  $consumer_secret = $app['oauth_consumer_secret'];
  if (!$consumer_key || !$consumer_secret) {
    return t('Consumer key or secret is missing.');
  }

  $oauth_request_token = 'http://app1.mediamosa.local/login/oauth/request_token';
  $oauth_authorize = 'http://app1.mediamosa.local/login/oauth/authorize';
  $oauth_access_token = 'http://app1.mediamosa.local/login/oauth/access_token';

  $sig_method = new OAuthSignatureMethod_HMAC_SHA1();
  $test_consumer = new OAuthConsumer($consumer_key, $consumer_secret, $callback_url);


  //$params = array();

  //$acc_token = new OAuthConsumer($_SESSION['oauth_token'], $_SESSION['oauth_token_secret'], 1);

  //$acc_req = OAuthRequest::from_consumer_and_token($test_consumer, $acc_token, "GET", $oauth_access_token);
  //$acc_req->sign_request($sig_method, $test_consumer, $acc_token);

  //$oc = new OAuthCurl();
  //$reqData = $oc->fetchData("{$acc_req}&oauth_verifier={$_GET['oauth_verifier']}");

  //parse_str($reqData['content'], $accOAuthData);

  //$_SESSION['final_oauth_token'] = $accOAuthData['oauth_token'];
  //$_SESSION['final_oauth_token_secret'] = $accOAuthData['oauth_token_secret'];


  $output .= '... end.<br />' . PHP_EOL;
  return $output;
}

/**
 * Implementation of hook_cron().
 */
function mediamosa_app_authentication_cron() {
  mediamosa_app_oauth::clean_up();
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_app_authentication_mediamosa_register_rest_call() {
  $rest_calls = array();

  $rest_calls['login'][mediamosa_rest_call::METHOD_POST] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_app_ident',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_app_authentication',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_1_1_0,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
  );

  $rest_calls['login'][mediamosa_rest_call::METHOD_GET] = $rest_calls['login'][mediamosa_rest_call::METHOD_POST];


  $rest_calls['login/cookie'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_check_cookie',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_app_authentication',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_0_0,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
  );

  $rest_calls['check_cookie'][mediamosa_rest_call::METHOD_GET] = $rest_calls['login/cookie'][mediamosa_rest_call::METHOD_GET];
  $rest_calls['check_cookie'][mediamosa_rest_call::METHOD_GET][mediamosa_rest_call::STATUS] = mediamosa_rest_call::STATUS_DEPRECATED;
  $rest_calls['check_cookie'][mediamosa_rest_call::METHOD_GET][mediamosa_rest_call::VERSION] = mediamosa_version::MEDIAMOSA_VERSION_1_1_0;

  // oAuth.

  $rest_calls['login/oauth/request_token'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_oauth_request_token',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_app_oauth',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_4_0,
    mediamosa_rest_call::RESPONSE_TYPE => mediamosa_rest_call::RESPONSE_TYPE_PLAIN,
  );

  $rest_calls['login/oauth/access_token'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_oauth_access_token',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_app_oauth',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_4_0,
    mediamosa_rest_call::RESPONSE_TYPE => mediamosa_rest_call::RESPONSE_TYPE_PLAIN,
  );

  return $rest_calls;
}

/**
 * Implements hook_mediamosa_register_rest_call_doc().
 */
function mediamosa_app_authentication_mediamosa_register_rest_call_doc() {
  $rest_calls = array();

  $rest_calls['login'][mediamosa_rest_call::METHOD_POST] = array(
    mediamosa_rest_call::TITLE => 'Log onto MediaMosa and authenticate as user end application',
    mediamosa_rest_call::DESCRIPTION => 'Log onto MediaMosa and authenticate as user end application.',
    mediamosa_rest_call::EXAMPLE_REQUEST => '/login<br /><br />dbus = "AUTH DBUS_COOKIE_SHA1 myuser"',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => '<items>
  <item>
    DATA vpx 0 2541e50e009440742ea00f61fbf5b612
  </item>
</items>',
  );

  $rest_calls['login'][mediamosa_rest_call::METHOD_GET] = $rest_calls['login'][mediamosa_rest_call::METHOD_POST];


  $rest_calls['login/cookie'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'Shows the contents of your cookie',
    mediamosa_rest_call::DESCRIPTION => 'Shows the contents of your cookie, for debugging purposes.',
    mediamosa_rest_call::EXAMPLE_REQUEST => '/login/cookie',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => '<items>
  <item id="1">
    <SESS84ff6063a88f1185a7aa>28b53dd9bd4e22922bccfc354</SESS84ff6063a88f1185a7aa>
  </item>
</items>',
  );

  $rest_calls['check_cookie'][mediamosa_rest_call::METHOD_GET] = $rest_calls['login/cookie'][mediamosa_rest_call::METHOD_GET];

  // oAuth.

  // login/oauth/request_token
  $rest_calls['login/oauth/request_token'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'oAuth request token.',
    mediamosa_rest_call::DESCRIPTION => 'The Consumer obtains an unauthorized Request Token.',
    mediamosa_rest_call::EXAMPLE_REQUEST => 'services/oauth/request_token?oauth_consumer_key=key&oauth_nonce=631253d79fc6ecd42f9f30f7badee7ce&oauth_signature=71EqRGJuDHBjQDoCL2V9Y798BwU%3D&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1296481425&oauth_version=1.0',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => 'oauth_token=requestkey&oauth_token_secret=requestsecret',
    mediamosa_rest_call::BEHAVE_AS_EXTERNAL => TRUE,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_FOR_EXTERNAL,
  );

  $rest_calls['login/oauth/access_token'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::TITLE => 'oAuth access token.',
    mediamosa_rest_call::DESCRIPTION => 'The Consumer exchanges the Request Token for an Access Token.',
    mediamosa_rest_call::EXAMPLE_REQUEST => 'services/oauth/access_token?oauth_consumer_key=key&oauth_nonce=22eb39fb5bc9ce96caeaa84320675522&oauth_signature=sjMuLMcBKHCUMo56Im7qJ4Yr%2BGo%3D&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1296482023&oauth_token=requestkey&oauth_version=1.0',
    mediamosa_rest_call::RESPONSE_FIELDS => array(),
    mediamosa_rest_call::EXAMPLE_RESPONSE => 'oauth_token=accesskey&oauth_token_secret=accesssecret',
  );

  return $rest_calls;
}

/**
 * Implements hook_mediamosa_app_authorized().
 */
function mediamosa_app_authentication_mediamosa_app_authorized() {
  // App already logged in?
  if (isset($_SESSION['mediamosa_app']) && isset($_SESSION['mediamosa_app']['app_id'])) {
    $_GET['app_id'] = $_SESSION['mediamosa_app']['app_id'];
    return TRUE;
  }

  // If IP white list is set, then we are 'simulated' authorized.
  $ip_address_whitelist = variable_get('mediamosa_debug_ip_whitelist', '');

  // Get the IP Address.
  $a_ip_address_whitelist = explode('|', $ip_address_whitelist);

  // If our IP address is in the white list, then we are 'authorized', but only
  // if you also set the app_id.
  if (in_array($_SERVER['REMOTE_ADDR'], $a_ip_address_whitelist) && !empty($_REQUEST['app_id'])) {
    return TRUE;
  }

  // Access denied.
  return FALSE;
}
