<?php
// $Id$

/**
 * MediaMosa is a Full Featured, Webservice Oriented Media Management and
 * Distribution platform (http://www.vpcore.nl)
 *
 * Copyright (C) 2009 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */


 /**
  * @file
  * Unittests for authentication module.
  */
class MediaMosaAppAuthenticationTestCase extends MediaMosaTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Challenge-reponse authentication',
      'description' => 'Challenge-reponse authentication for end user applications.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE,
    );
  }

  function setUp() {
    parent::setUp('mediamosa_app_authentication', 'mediamosa');

    // Create and login user
    $rest_user = $this->drupalCreateUser(array(MEDIAMOSA_PERM_REST_ACCESS));
    $this->drupalLogin($rest_user);
  }

  function testAppAuthentication() {
    // Create all stuff needed for this test
    $app = $this->createApp();
    $app_id = $app[mediamosa_app_db::APP_ID];
    $app_name = $app[mediamosa_app_db::NAME];
    $shared_key = $app[mediamosa_app_db::SHARED_KEY];

    // Step 1: start auth and capture cookie
    $response = $this->restCall($app, 'login', 'POST', array('dbus' => 'AUTH DBUS_COOKIE_SHA1 '. $app_name));
    $dbus_data = explode(' ', $response['xml']->items->item->dbus);

    list($cookie) = explode(';', $response['headers']['Set-Cookie']);
    $this->assertTrue(isset($response['headers']['Set-Cookie']), 'Cookie received in HTTP header: '. $cookie);
    $this->assertTrue(isset($response['xml']->items->item->cookie), 'Cookie received in XML response: '. $response['xml']->items->item->cookie);

    // Step 2: send the credentials
    $challenge = $dbus_data[3];
    $random = substr(md5(microtime(TRUE)), 0, 10);
    $post_data = array('dbus' => 'DATA '. $random .' '. sha1(sprintf('%s:%s:%s', $challenge, $random, $shared_key)));
    $response = $this->restCall($app, 'login', 'POST', $post_data, array('Cookie: '. $cookie));

/*
    $this->pass(check_plain(var_export($challenge, TRUE)));
    $this->pass(check_plain(var_export($dbus_data, TRUE)));
    $this->pass(check_plain(var_export($post_data, TRUE)));
*/
    $this->pass(check_plain(var_export($response['xml'], TRUE)));

  }
}
