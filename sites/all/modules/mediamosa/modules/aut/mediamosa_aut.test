<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice Oriented Media Management and
 * Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2009 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

 /**
  * @file
  * Unittests for aut/ACL.
  *
  * Conve
  *
  */
class MediaMosaAutTestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'Autorisatie ACL/AUT module test',
      'description' => 'Testing the AUT module, previously known as ACL.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE,
    );
  }

  // ------------------------------------------------------------------ Tests.
  function testTicket47() {

    // Create an asset.
    $asset_id = $this->createAsset();

    // Create mediafile.
    $mediafile_id = $this->createMediafile($asset_id);

    // Update asset play time.

    /**
     * Update asset:
     * Play_restriction tests - normal
     */
    $a_parameters = array(
      mediamosa_rest_call_asset_update::PLAY_RESTRICTION_START => '2008-01-01 01:01:01',
      mediamosa_rest_call_asset_update::PLAY_RESTRICTION_END => '2008-02-02 02:02:02',
    );

    // Update asset.
    $this->updateAsset($asset_id, $a_parameters, 'update asset play_restriction');

    /**
     * Update asset:
     * Play_restriction tests - different user ID
     */
    $a_parameters = array(
      mediamosa_rest_call_asset_update::PLAY_RESTRICTION_START => '2008-01-01 01:01:01',
      mediamosa_rest_call_asset_update::PLAY_RESTRICTION_END => '2008-02-02 02:02:02',
      mediamosa_rest_call_asset_update::USER_ID => 'foo',
    );

    // Update asset.
    $this->updateAsset($asset_id, $a_parameters, 'update asset: wrong user_id', array(mediamosa_error::ERRORCODE_NOT_AUTHORIZED));
  }
}

/*
    // test: supplements

    // [post] asset/$asset_id/supplement/create - maak een lege supplement aan: wrong app_id
    $a_args = array(
      'uri' => array(
        'asset_id' => $s_asset_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID2,
        'user_id' => SIMPLETEST_USER_ID
      ),
    );

    $result = $this->_do_restcall(
      "media_management_create_asset_supplement",
      array($a_args)
    );

    $s_supplement_id = 0;
    if (isset($result->response['items'][1]['supplement_id'])) {
      $s_supplement_id = $result->response['items'][1]['supplement_id'];
      $this->a_test_data['asset_supplement'][] = array('supplement_id' => $s_supplement_id);
    }
    $this->assertTrue(
      ($result->response['header']['request_result_id'] == (string)ERRORCODE_NOT_AUTHORIZED) ||
      ($result->response['header']['request_result_id'] == (string)ERRORCODE_WEBSERVICE_DISABLED),
      "Create a new supplement: ". $s_supplement_id ." (request_result = ". ERRORCODE_NOT_AUTHORIZED ."): %s"
    );
   // [post] asset/$asset_id/supplement/create - maak een lege supplement aan: wrong user_id
    $a_args = array(
      'uri' => array(
        'asset_id' => $s_asset_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID,
        'user_id' => "77"
      ),
    );

    $result = $this->_do_restcall(
      "media_management_create_asset_supplement",
      array($a_args)
    );

    if (isset($result->response['items'][1]['supplement_id'])) {
      $s_supplement_id = $result->response['items'][1]['supplement_id'];
      $this->a_test_data['asset_supplement'][] = array('supplement_id' => $s_supplement_id);
    }
    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_NOT_AUTHORIZED,
      "Create a new supplement: ". $s_supplement_id ." (request_result = ". ERRORCODE_NOT_AUTHORIZED ."): %s"
    );

    // [post] asset/$asset_id/supplement/create - maak een lege supplement aan: all correct now
    $a_args = array(
      'uri' => array(
        'asset_id' => $s_asset_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID,
        'user_id' => SIMPLETEST_USER_ID
      ),
    );

    $result = $this->_do_restcall(
      "media_management_create_asset_supplement",
      array($a_args)
    );

    if (isset($result->response['items'][1]['supplement_id'])) {
      $s_supplement_id = $result->response['items'][1]['supplement_id'];
      $this->a_test_data['asset_supplement'][] = array('supplement_id' => $s_supplement_id);
    }

    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_OKAY,
      "Create a new supplement: ". $s_supplement_id ." (request_result = ". ERRORCODE_OKAY ."): %s"
    );

    // [post] supplement/$supplement_id/delete - verwijder een supplement
    $a_args = array(
      'uri' => array(
        'supplement_id' => $s_supplement_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID,
        'user_id' => 45,
      ),
    );

    $result = $this->_do_restcall(
      "media_management_delete_asset_supplement",
      array($a_args)
    );

    if ($result->response['header']['request_result'] === ERRORMESSAGE_OKAY) {
      $this->a_test_data['asset_supplement'] = array();
    }
    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_NOT_AUTHORIZED,
      "Delete a new supplement: ". $s_supplement_id ." (request_result = ". ERRORCODE_NOT_AUTHORIZED ."): %s"
    );
    // [post] supplement/$supplement_id/delete - verwijder een supplement
    $a_args = array(
      'uri' => array(
        'supplement_id' => $s_supplement_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID2,
        'user_id' => SIMPLETEST_USER_ID
      ),
    );

    $result = $this->_do_restcall(
      "media_management_delete_asset_supplement",
      array($a_args)
    );

    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_NOT_AUTHORIZED,
      "Delete a new supplement: ". $s_supplement_id ." (request_result = ". ERRORCODE_NOT_AUTHORIZED ."): %s"
    );
    // [post] supplement/$supplement_id/delete - verwijder een supplement
    $a_args = array(
      'uri' => array(
        'supplement_id' => $s_supplement_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID,
        'user_id' => SIMPLETEST_USER_ID
      ),
    );

    $result = $this->_do_restcall(
      "media_management_delete_asset_supplement",
      array($a_args)
    );

    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_OKAY,
      "Delete a new supplement: ". $s_supplement_id ." (request_result = ". ERRORCODE_OKAY ."): %s"
    );

    // asset metadata

    // zoek de metadata definities op
    $a_metadata_definitions_full =
      array_merge(_media_management_get_metadata_definitions('dublin_core'),
                  _media_management_get_metadata_definitions('qualified_dublin_core'));

    // [post] asset/$asset_id/metadata
    $a_args = array(
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID,
        'user_id' => SIMPLETEST_USER_ID
      ),
      'uri' => array(
        'asset_id' => $s_asset_id
      )
    );

    foreach ($a_metadata_definitions_full as $key => $value) {
      switch ($value['propdef_type']) {
        case "DATETIME":
          $a_args['post'][$key] = "2008-01-01 23:59:59";
          break;
        default:
          $a_args['post'][$key] = vpx_create_hash(SIMPLETEST_APP_ID, SIMPLETEST_USER_ID);
      }
      switch ($key) {
        case "language":
          $a_args['post'][$key] = "nl";
          break;
      }
      $a_metadata_definitions_ids[$value['propdef_id']] = $key;
    }

    $result = $this->_do_restcall(
      "media_management_create_metadata",
      array($a_args)
    );

    $this->a_test_data['asset_property'][] = array('asset_id' => $s_asset_id);

    $this->assertTrue(
      $result->response['header']['request_result'] === ERRORMESSAGE_OKAY,
      "Create asset metadata (request_result = ". ERRORMESSAGE_OKAY ."): %s"
    );

    $a_args = array(
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID,
        'user_id' => 'pietje'
      ),
      'uri' => array(
        'asset_id' => $s_asset_id
      )
    );

    foreach ($a_metadata_definitions_full as $key => $value) {
      switch ($value['propdef_type']) {
        case "DATETIME":
          $a_args['post'][$key] = "2008-01-01 23:59:59";
          break;
        default:
          $a_args['post'][$key] = vpx_create_hash(SIMPLETEST_APP_ID, SIMPLETEST_USER_ID);
      }
      switch ($key) {
        case "language":
          $a_args['post'][$key] = "nl";
          break;
      }
      $a_metadata_definitions_ids[$value['propdef_id']] = $key;
    }

    $result = $this->_do_restcall(
      "media_management_create_metadata",
      array($a_args)
    );

    $this->a_test_data['asset_property'][] = array('asset_id' => $s_asset_id);

    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_NOT_AUTHORIZED,
      "Create asset metadata by nonowner (request_result = ". ERRORCODE_NOT_AUTHORIZED ."): %s"
    );

    $a_args = array(
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID2,
        'user_id' => SIMPLETEST_USER_ID
      ),
      'uri' => array(
        'asset_id' => $s_asset_id
      )
    );

    foreach ($a_metadata_definitions_full as $key => $value) {
      switch ($value['propdef_type']) {
        case "DATETIME":
          $a_args['post'][$key] = "2008-01-01 23:59:59";
          break;
        default:
          $a_args['post'][$key] = vpx_create_hash(SIMPLETEST_APP_ID, SIMPLETEST_USER_ID);
      }
      switch ($key) {
        case "language":
          $a_args['post'][$key] = "nl";
          break;
      }
      $a_metadata_definitions_ids[$value['propdef_id']] = $key;
    }

    $result = $this->_do_restcall(
      "media_management_create_metadata",
      array($a_args)
    );

    $this->a_test_data['asset_property'][] = array('asset_id' => $s_asset_id);

    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_NOT_AUTHORIZED,
      "Create asset metadata by diff app (request_result = ". ERRORCODE_NOT_AUTHORIZED ."): %s"
    );

    //verwijderen metadata
    $a_args = array(
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID2,
        'user_id' => SIMPLETEST_USER_ID
      ),
      'uri' => array(
        'asset_id' => $s_asset_id
      )
    );

    $result = $this->_do_restcall(
      "media_management_create_metadata",
      array($a_args)
    );

    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_NOT_AUTHORIZED,
      "Create asset metadata by diff app (request_result = ". ERRORCODE_NOT_AUTHORIZED ."): %s"
    );


    //cleanup testdata : verwijderen metadata
    $a_args = array(
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID,
        'user_id' => SIMPLETEST_USER_ID
      ),
      'uri' => array(
        'asset_id' => $s_asset_id
      )
    );

    $result = $this->_do_restcall(
      "media_management_create_metadata",
      array($a_args)
    );

    //collections

    $s_coll_id = $this->_create_collection();

    // verwijder de collection via media_management_delete_collection()
    $a_args = array(
      'uri' => array(
        'coll_id' => $s_coll_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID2,
        'user_id' => SIMPLETEST_USER_ID,
      ),
    );

    $result = $this->_do_restcall(
      "media_management_delete_collection",
      array($a_args)
    );

    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_NOT_AUTHORIZED,
      "Delete a new Collection: ". $s_supplement_id ." (request_result = ". ERRORCODE_NOT_AUTHORIZED ."): %s"
    );
    // verwijder de collection via media_management_delete_collection()
    $a_args = array(
      'uri' => array(
        'coll_id' => $s_coll_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID,
        'user_id' => 42,
      ),
    );

    $result = $this->_do_restcall(
      "media_management_delete_collection",
      array($a_args)
    );

    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_NOT_AUTHORIZED,
      "Delete a new Collection: ". $s_supplement_id ." (request_result = ". ERRORCODE_NOT_AUTHORIZED ."): %s"
    );
    $a_args = array(
      'uri' => array(
        'coll_id' => $s_coll_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID,
        'user_id' => SIMPLETEST_USER_ID,
      ),
    );

    $result = $this->_do_restcall(
      "media_management_delete_collection",
      array($a_args)
    );

    if ($success = $result->response['header']['request_result_id'] == ERRORCODE_OKAY) {
      $this->a_test_data['collection'] = array();
    }

    $this->assertTrue(
      $success,
      "media_management_delete_collection() request. %s"
    );

    // mediafile
    $a_args = array(
      'uri' => array(
        'mediafile_id' => $s_mediafile_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID,
        'user_id' => SIMPLETEST_USER_ID,
      ),
      'post' => array(
        'filename' => "new_filename.ext"
      )
    );

    $result = $this->_do_restcall(
      "media_management_update_mediafile",
      array($a_args)
    );

    $this->assertTrue(
      $result->response['header']['request_result_id'] === ERRORCODE_OKAY,
      "Update the filename of a mediafile (request_result_id = ". ERRORCODE_OKAY ."): %s"
    );

    $a_args = array(
      'uri' => array(
        'mediafile_id' => $s_mediafile_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID,
        'user_id' => 'pietje',
      ),
      'post' => array(
        'filename' => "newer_filename.ext"
      )
    );

    $result = $this->_do_restcall(
      "media_management_update_mediafile",
      array($a_args)
    );

    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_NOT_AUTHORIZED,
      "Update filename by a different user: (request_result = ". ERRORCODE_NOT_AUTHORIZED ."): %s"
    );

    $a_args = array(
      'uri' => array(
        'mediafile_id' => $s_mediafile_id
      ),
      'get' => array(
        'app_id' => SIMPLETEST_APP_ID2,
        'user_id' => SIMPLETEST_USER_ID,
      ),
      'post' => array(
        'filename' => "newer_filename.ext"
      )
    );

    $result = $this->_do_restcall(
      "media_management_update_mediafile",
      array($a_args)
    );

    $this->assertTrue(
      $result->response['header']['request_result_id'] == (string)ERRORCODE_NOT_AUTHORIZED,
      "Update filename by a different app: (request_result = ". ERRORCODE_NOT_AUTHORIZED ."): %s"
    );
  }
 */