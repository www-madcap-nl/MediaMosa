<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2010 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * Upload/playproxy test for ogg files.
 */
class MediaMosaPlayProxyOggTestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'Play proxy - OGG files',
      'description' => 'Testing the play proxy call for OGG files. Uses the default setup, does not test your current server setup.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_PLAYPROXY,
    );
  }

  /**
   * Implements setUp().
   */
  protected function setUp() {
    // Default setup for servers.
    $this->default_servers = TRUE;

    // Run parent first so we are inside sandbox.
    // Call parent::setUp and preserve arguments.
    $args = func_get_args();

    // Fixme; 5.3 fix calls __NAMESPACE__ which refers to a static namespace,
    // not dynamic like $this.
    if (drupal_substr(phpversion(), 0, 3) < '5.3') {
      call_user_func_array(array($this, 'parent::setUp'), $args);
    }
    else {
      call_user_func_array(array(__NAMESPACE__ . '\MediaMosaTestCaseEga', 'parent::setUp'), $args);
    }
  }

  /**
   * ogg upload analyse playproxy test.
   */
  function testTicket_mmorg359() {
    // Upload ogg file.
    $result = $this->uploadTestFile($this->getTestVideo_ogg());

    // Now get playproxy call.
    // Set the parameters.
    $parameters = array(
      mediamosa_rest_call_asset_mediafile_play::USER_ID => self::SIMPLETEST_USER_ID,
      mediamosa_rest_call_asset_mediafile_play::MEDIAFILE_ID => $result['mediafile_id'],
      mediamosa_rest_call_asset_mediafile_play::RESPONSE => mediamosa_asset_mediafile_play_proxy::RESPONSE_TYPE_OBJECT,
    );

    // Set the Uri.
    $uri = strtr('asset/@asset_id/play', array('@asset_id' => $result['asset_id']));

    // Do basic play proxy call.
    $response = $this->restCallGet($uri, $parameters);

    // Dump response.
    $this->var_export($response['xml']);

    $ticket_id = $response['xml']->items->item[0]->ticket_id;

    // Test if the link to file exists.
    $link_to_file = mediamosa_configuration_storage::ticket_play_location_get($this->a_app[mediamosa_app_db::APP_ID]) . DIRECTORY_SEPARATOR . $ticket_id;

    // Check if link exists.
    $this->assertTrue(file_exists($link_to_file), 'Ticket link to file exists');
  }
}
