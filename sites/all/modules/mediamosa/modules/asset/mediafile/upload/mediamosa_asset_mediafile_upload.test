<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice Oriented Media Management and
 * Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2009 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

 /**
  * @file
  * Upload test of files (videos / stills).
  */

/**
  * @file
  * Unittests for upload.
  */
class MediaMosaAssetMediafileUploadTestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'Upload Mediafile test',
      'description' => 'Test uploading of files (videos, stills).',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE,
    );
  }

  // ------------------------------------------------------------------ Tests.
  function testTicket504() {

    // Create an asset.
    $asset_id = $this->createAsset();

    // Create mediafile.
    $mediafile_id = $this->createMediafile($asset_id);

    // Create upload ticket.
    $a_uploadticket = $this->createMediafileUploadTicket($mediafile_id);

    $result = mediamosa_db::db_query('SELECT * FROM {mediamosa_ticket}');
    foreach ($result as $row) {
      $this->var_export($row, 'Dump Ticket');
    }

    // Check ticket link etc.
    $this->assertTrue(!empty($a_uploadticket['action']), 'action set');
    $this->assertTrue(!empty($a_uploadticket['uploadprogress_url']), 'uploadprogress_url set');

    // Get link to upload file.
    $filename = self::getTestVideo();

    // URL.
    $action = $a_uploadticket['action'];

    // File.
    $a_post['file'] = '@' . $filename;

    // No headers.
    $headers = array();

    // Upload the test file.
    $out = $this->curlExec(array(CURLOPT_URL => $action, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $a_post, CURLOPT_HTTPHEADER => $headers));

    // Replace original page output with new output from redirected page(s).
    $new = $this->checkForMetaRefresh();
    if ($new) {
      $out = $new;
    }

    // Our upload.
    $this->pass('POST request to: ' . $action .
                '<hr />Ending URL: ' . $this->getUrl() .
                '<hr />Fields: ' . highlight_string('<?php ' . var_export($a_post, TRUE), TRUE) .
                '<hr />' . $out);

    list($response, $data) = explode("\r\n\r\n", $out, 2);
    $response = preg_split("/\r\n|\n|\r/", $response);

    // Parse the response status line.
    list($protocol, $code, $status_message) = explode(' ', trim(array_shift($response)), 3);

    // Check 200 resonse.
    $this->assertTrue($code == 200, 'Upload HTML response 200.');

    // Get the upload job.
    $a_job = mediamosa_job::get_by_mediafileid($mediafile_id);
    $this->var_export($a_job, 'Dump Job');

    // Other.
    $a_job_upload = mediamosa_job_upload::get($a_job[mediamosa_job_db::ID]);
    $this->var_export($a_job_upload, 'Dump Job Upload');
  }
}
