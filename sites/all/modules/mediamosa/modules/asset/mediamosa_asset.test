<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice Oriented Media Management and
 * Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2009 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

 /**
  * @file
  * Asset tests.
  */

/**
  * @file
  * Unittests for assets.
  */
class MediaMosaAssetTestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'Asset test',
      'description' => 'Testing the asset calls.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE,
    );
  }

  // ------------------------------------------------------------------ Tests.

  /*
   * Testing is_empty_asset issues, see: ticket 165
   */
  function testAssetIsEmptyAsset() {

    // Create an asset.
    $asset_id = $this->createAsset();

    // Create mediafile.
    $mediafile_id = $this->createMediafile($asset_id);

    // Create uploadticket
    $ticket = $this->createMediafileUploadTicket($mediafile_id);

    // Update mediafile
    $a_parameters = array(
      mediamosa_rest_call_create_mediafile::URI => 'http://empty.asset.demo',
    );
    $this->updateMediafile($mediafile_id, self::SIMPLETEST_USER_ID, $a_parameters);

    // Get the asset
    $asset = $this->getAsset($asset_id);

    // Check is_empty_asset field is FALSE
    // TODO

  }

  /*
   * Testing is_empty_asset issue, see: ticket 167
   */
  function testAssetIsEmptyAsset2() {

    // Create an asset.
    $asset_id = $this->createAsset();

    // Create mediafile.
    $mediafile_id_empty = $this->createMediafile($asset_id);

    // Create uploadticket
    $ticket = $this->createMediafileUploadTicket($mediafile_id);

    // Create an another mediafile with an URI.
    $a_parameters = array(
      mediamosa_rest_call_create_mediafile::URI => 'http://empty.asset.demo',
    );
    $mediafile_id_with_uri = $this->createMediafile($asset_id, self::SIMPLETEST_USER_ID, $a_parameters);

    // Get the asset
    $asset = $this->getAsset($asset_id);

    // Check is_empty_asset field is FALSE
    // TODO

  }

}
