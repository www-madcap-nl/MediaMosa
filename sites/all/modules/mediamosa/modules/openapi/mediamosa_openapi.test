<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2010 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
  * @file
  * Unittests for openAPI.
  */
class MediaMosaOpenAPITestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ----------------------------------------------------------------- Functions.
  public static function getInfo() {
    return array(
      'name' => 'Mediafile - openAPI test',
      'description' => 'Test openAPI related functions.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_OPENAPI,
    );
  }

  // -------------------------------------------------------------------- Tests.
  function testOpenAPI() {
    // Enable OpenAPI module.
    module_enable(array('mediamosa_openapi'), TRUE);


    // Create mediafile with /openapi/mediaItem [POST] call.
    $item_user_id = '@me';
    $group_id = '@self';
    $album_id = mediamosa_db::uuid(0);
    $parameters = array(
      'created' => '2003-12-13T18:30:02Z',
      'description' => mediamosa_db::uuid(0),
      'duration' => mt_rand(10, 100),
      'file_size' => mt_rand(10, 100),
      'id' => mediamosa_db::uuid(0),
      'language' => mt_rand(0, 1) ? 'nld' : 'eng',
      'last_updated' => '2004-10-11T13:24:10Z',
      'location' => mediamosa_db::uuid(0),
      'mime_type' => mediamosa_db::uuid(0),
      'num_comments' => mt_rand(0, 100),
      'num_views' => mt_rand(0, 100),
      'num_votes' => mt_rand(0, 100),
      'rating' => mt_rand(0, 10),
      'start_time' => '2007-04-13T07:49:09Z',
      'tagged_people' => array(
        mediamosa_db::uuid(0),
        mediamosa_db::uuid(0),
      ),
      'tags' => array(
        mt_rand(0, 100),
        mt_rand(0, 100),
        mt_rand(0, 100),
      ),
      'thumbnail_url' => 'http://mediamosa.org/test/thumnail/url/' . mediamosa_db::uuid(0),
      'title' => mediamosa_db::uuid(0),
      'type' => 'video',
      'url' => 'http://mediamosa.org/test/thumnail/url/' . mediamosa_db::uuid(0),
    );
    $asset = $this->createMediaItem($item_user_id, $group_id, $album_id, $parameters);
    $asset_id = $asset['entry']['extension']['asset_id'];
    $mediafile_id = $asset['entry']['extension']['mediafile_id'];


    // Get the mediafile with /openapi/mediaItems [GET] call.
    $assets = $this->getMediaItems($item_user_id, $group_id, $album_id, $mediafile_id);


    // Check response.
    // Dump the response.
    $this->assertTrue(TRUE, print_r($assets, TRUE));
    // Check.
    $mediaitem = $assets['entry']['content']['mediaItem'];

    $field = 'id';
    $this->assertTrue(
      $mediaitem[$field] == $mediafile_id,
      strtr('Field "@field" has the good value (@sent == @get).', array(
        '@field' => $field,
        '@sent' => $mediafile_id,
        '@get' => $mediaitem[$field],
      ))
    );

    $field = 'description';
    $this->assertTrue(
      $mediaitem[$field] == $parameters[$field],
      strtr('Field "@field" has the good value (@sent == @get).', array(
        '@field' => $field,
        '@sent' => $parameters[$field],
        '@get' => $mediaitem[$field],
      ))
    );

    $field = 'title';
    $this->assertTrue(
      $mediaitem[$field] == $parameters[$field],
      strtr('Field "@field" has the good value (@sent == @get).', array(
        '@field' => $field,
        '@sent' => $parameters[$field],
        '@get' => $mediaitem[$field],
      ))
    );


    // Create other mediafile with /openapi/mediaItem [POST] call.
    $item_user_id2 = '@me';
    $group_id2 = '@self';
    $album_id2 = mediamosa_db::uuid(0);
    $parameters2 = array(
      'created' => '2003-11-13T18:30:02Z',
      'description' => $parameters['description'], // Same field.
      'duration' => mt_rand(10, 100),
      'file_size' => mt_rand(10, 100),
      'id' => mediamosa_db::uuid(0),
      'language' => mt_rand(0, 1) ? 'nld' : 'eng',
      'last_updated' => '2004-09-11T13:24:10Z',
      'location' => mediamosa_db::uuid(0),
      'mime_type' => mediamosa_db::uuid(0),
      'num_comments' => mt_rand(0, 100),
      'num_views' => mt_rand(0, 100),
      'num_votes' => mt_rand(0, 100),
      'rating' => mt_rand(0, 10),
      'start_time' => '2007-03-13T07:49:09Z',
      'tagged_people' => array(
        mediamosa_db::uuid(0),
        mediamosa_db::uuid(0),
      ),
      'tags' => array(
        mt_rand(0, 100),
        mt_rand(0, 100),
        mt_rand(0, 100),
      ),
      'thumbnail_url' => 'http://mediamosa.org/test/thumnail/url/' . mediamosa_db::uuid(0),
      'title' => mediamosa_db::uuid(0),
      'type' => 'video',
      'url' => 'http://mediamosa.org/test/thumnail/url/' . mediamosa_db::uuid(0),
    );
    $asset2 = $this->createMediaItem($item_user_id2, $group_id2, $album_id2, $parameters2);
    $asset_id2 = $asset2['entry']['extension']['asset_id'];
    $mediafile_id2 = $asset2['entry']['extension']['mediafile_id'];


    // Search mediafiles with /openapi/search [GET] call.
    $query = $parameters2['title'];
    $search_parameters = array(
      'qLimit' => NULL,
      'qOffset' => NULL,
      'qOrder' => NULL,
      'qDirection' => NULL,
      'Subject' => NULL,
      'Language' => NULL,
      'Location' => NULL,
      'Since' => NULL,
      'Until' => NULL,
      'Author' => NULL,
      'Contributor' => NULL,
      'Publisher' => NULL,
      'Category' => NULL,
      'Format' => NULL,
      'Duration' => NULL,
    );
    $assets2 = $this->searchOpenAPI($query, $search_parameters);


    // Check response.
    // Dump the response.
    $this->assertTrue(TRUE, print_r($assets2, TRUE));
    // Check.
    $mediaitem2 = $assets2['entry']['content']['mediaItem'];

    $field = 'id';
    $this->assertTrue(
      $mediaitem2[$field] == $mediafile_id2,
      strtr('Field "@field" has the good value (@sent == @get).', array(
        '@field' => $field,
        '@sent' => $mediafile_id2,
        '@get' => $mediaitem2[$field],
      ))
    );

    $field = 'description';
    $this->assertTrue(
      $mediaitem2[$field] == $parameters2[$field],
      strtr('Field "@field" has the good value (@sent == @get).', array(
        '@field' => $field,
        '@sent' => $parameters2[$field],
        '@get' => $mediaitem2[$field],
      ))
    );

    $field = 'title';
    $this->assertTrue(
      $mediaitem2[$field] == $parameters2[$field],
      strtr('Field "@field" has the good value (@sent == @get).', array(
        '@field' => $field,
        '@sent' => $parameters2[$field],
        '@get' => $mediaitem2[$field],
      ))
    );


    // Search mediafiles with /openapi/search [GET] call.
    $query = $parameters['description']; // Common parameter.
    $search_parameters = array(
      'qLimit' => NULL,
      'qOffset' => NULL,
      'qOrder' => NULL,
      'qDirection' => NULL,
      'Subject' => NULL,
      'Language' => NULL,
      'Location' => NULL,
      'Since' => NULL,
      'Until' => NULL,
      'Author' => NULL,
      'Contributor' => NULL,
      'Publisher' => NULL,
      'Category' => NULL,
      'Format' => NULL,
      'Duration' => NULL,
    );
    $assets_search = $this->searchOpenAPI($query, $search_parameters);


    // Check response.
    // Dump the response.
    $this->assertTrue(TRUE, print_r($assets_search, TRUE));
    // Check.
    $count = count($assets_search['entry']);
    $this->assertTrue($count == 2, strtr('We get the correct number of results (2 == @count).', array('@count' => $count,)));
  }
}
