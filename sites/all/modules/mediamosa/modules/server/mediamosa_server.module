<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2009 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * Server module.
 */

/**
 * Implements hook_menu().
 */
function mediamosa_server_menu() {
  $items = array();

  $items['admin/mediamosa/config/server'] = array(
    'title' => 'Server listing',
    'description' => 'List all MediaMosa Servers.',
    'page callback' => '_mediamosa_server_list',
    'access arguments' => array('access mediamosa'),
    'weight' => 10,
  );

  $items['admin/mediamosa/config/server/list'] = array(
    'title' => 'List',
    'access arguments' => array('access mediamosa'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );

  $server_types = array(
    mediamosa_server_db::SERVER_TYPE_DOWNLOAD => t('Download'),
    mediamosa_server_db::SERVER_TYPE_STILL => t('Still'),
    mediamosa_server_db::SERVER_TYPE_STREAMING => t('Streaming'),
    mediamosa_server_db::SERVER_TYPE_JOB_PROCESSOR => t('Processing'),
    mediamosa_server_db::SERVER_TYPE_UPLOAD => t('Upload'),
  );

  $weight = 0;
  foreach ($server_types as $server_type => $title) {
    $items['admin/mediamosa/config/server/add/' . $server_type] = array(
      'title' => 'Add ' . $title,
      'page callback' => 'node_add',
      'page arguments' => array(mediamosa_node::MEDIAMOSA_NODE_TYPE_SERVER),
      'access callback' => 'node_access',
      'access arguments' => array('create', mediamosa_node::MEDIAMOSA_NODE_TYPE_SERVER),
      'file' => 'node.pages.inc',
      'file path' => drupal_get_path('module', 'node'),
      'type' => MENU_LOCAL_TASK,
      'weight' => $weight++,
    );
  }

  $items['admin/mediamosa/config/server/%/edit'] = array(
    'title' => 'Client application contacts',
    'type' => MENU_CALLBACK,
    'page callback' => '_mediamosa_app_contacts',
    'page arguments' => array(4),
    'access arguments' => array('administer mediamosa config server'),
  );

  $items['admin/mediamosa/config/server/%node'] = array(
    'page callback' => 'node_page_view',
    'page arguments' => array(4),
    'access callback' => 'node_access',
    'access arguments' => array('view', 4),
    'type' => MENU_CALLBACK,
  );
  $items['admin/mediamosa/config/server/%node/view'] = array(
    'title' => 'View',
    'type' => MENU_CALLBACK,
    'weight' => -10,
  );

  $items['admin/mediamosa/config/server/%node/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'node_page_edit',
    'page arguments' => array(4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 4),
    'theme callback' => '_node_custom_theme',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
  );

  $items['admin/mediamosa/config/server/%node/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mediamosa_node_delete_confirm', 4),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 4),
    'theme callback' => '_node_custom_theme',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function mediamosa_server_permission() {
  return array(
    'administer mediamosa config server' =>  array(
      'title' => t('Adminster MediaMosa servers.'),
      'description' => t('Give administer rights for editing MediaMosa 2 servers.'),
    ),
  );
}

/**
 * Implements hook_mediamosa_register_rest_call().
 */
function mediamosa_server_mediamosa_register_rest_call() {

  $a_rest_calls = array();

  $a_rest_calls['server/status'][mediamosa_rest_call::METHOD_GET] = array(
    mediamosa_rest_call::CLASS_NAME => 'mediamosa_rest_call_server_status',
    mediamosa_rest_call::STATUS => mediamosa_rest_call::STATUS_ACTIVE,
    mediamosa_rest_call::DESCRIPTION => 'Retrieve information about the (process) server.',
    mediamosa_rest_call::MODULE_NAME => 'mediamosa_server',
    mediamosa_rest_call::VERSION => mediamosa_version::MEDIAMOSA_VERSION_2_1_0,
    mediamosa_rest_call::ACCESS => mediamosa_rest_call::ACCESS_INTERNAL_ONLY,
  );

  return $a_rest_calls;
}

/**
 * Show the mediamosa servers.
 */
function _mediamosa_server_list() {
  $rows = array();

  $header = array(
    array('data' => t('Server Type'), 'field' => 'ms.' . mediamosa_server_db::SERVER_TYPE, 'sort' => 'asc'),
    array('data' => t('Title'), 'field' => 'ms.' . mediamosa_server_db::SERVER_NAME, 'sort' => 'asc'),
    array('data' => t('URI'), 'field' => 'ms.' . mediamosa_server_db::URI, 'sort' => 'asc'),
    array('data' => t('Status'), 'field' => 'ms.' . mediamosa_server_db::SERVER_STATUS, 'sort' => 'asc'),
    t('Operations'),
  );

  $query = db_select(mediamosa_server_db::TABLE_NAME, 'ms')->extend('PagerDefault')->extend('TableSort');
  $query->fields('ms');
  $query->orderByHeader($header);
  $query->limit(mediamosa_settings::maintenance_items_per_page());
  $result = $query->execute();

  // Get destination.
  $l_options = array('query' => drupal_get_destination());

  foreach ($result as $server) {
    $actions = array(
      l(t('Edit'), 'admin/mediamosa/config/server/'. $server->{mediamosa_app_db::NID} . '/edit', $l_options),
      l(t('Delete'), 'admin/mediamosa/config/server/'. $server->{mediamosa_app_db::NID} . '/delete', $l_options),
    );

    $statuses = array(
      mediamosa_server_db::SERVER_STATUS_ON => t('On'),
      mediamosa_server_db::SERVER_STATUS_CLOSE => t('Close'),
      mediamosa_server_db::SERVER_STATUS_OFF => t('Off'),
    );

    $rows[] = array('data' =>
      array(
        // Cells
        t($server->{mediamosa_server_db::SERVER_TYPE}),
       'title' => array('data' => l($server->{mediamosa_server_db::SERVER_NAME}, 'admin/mediamosa/config/server/' . $server->{mediamosa_server_db::NID}), 'field' => mediamosa_server_db::SERVER_NAME),
        t($server->{mediamosa_server_db::URI}),
        $statuses[$server->{mediamosa_server_db::SERVER_STATUS}],
        implode(' | ', $actions),
      ),
    );
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('You have no servers specified. Click on the <em>Add</em> tab to create one.')));
  $output .= theme('pager');

  return $output;
}


/**
 * Implements hook_form().

function mediamosa_server_form($node, $form_state) {
  // If we're inserting a new nod, set some defaults:
  $form = array();

  $form['fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('MediaMosa server'),
    '#collapsible' => FALSE,
  );

  $form['fieldset']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('Description of the server.'),
    '#default_value' => $node->title,
    '#required' => TRUE,
  );

  if (!isset($node->nid)) {
    $form['fieldset']['#description'] = t('Create a new MediaMosa server.');
    $form['fieldset']['server_type'] = array(
      '#type' => 'select',
      '#title' => t('Server type'),
      '#options' => array(
        mediamosa_server_db::SERVER_TYPE_DOWNLOAD => t('Download server'),
        mediamosa_server_db::SERVER_TYPE_STILL => t('Still server'),
        mediamosa_server_db::SERVER_TYPE_STREAMING => t('Streaming server'),
        mediamosa_server_db::SERVER_TYPE_JOB_PROCESSOR => t('Job process server'),
        mediamosa_server_db::SERVER_TYPE_UPLOAD => t('upload server'),
      ),
      '#description' => t('The server type cannot be changed once the server is created.'),
    );
  }
  else {
    // Alter the fieldset title and description
    $form['fieldset']['#title'] = check_plain($node->title);
    $form['fieldset']['#description'] = t('Server type: @type', array('@type' => $node->server_type));

    // Get all optional server property options
    $options = _mediamosa_server_get_server_options($node->server_type);

    // Optional server properties
    if (in_array('uri', $options)) {
      $form['fieldset']['uri'] = array(
        '#type' => 'textfield',
        '#title' => t('URI'),
        '#description' => t('{TICKET} is available for use in the URI.'),
        '#default_value' => $node->uri,
        '#required' => TRUE,
        '#maxlength' => mediamosa_server_db::URI_LENGTH,
      );
    }
    if (in_array('containers', $options)) {
      $form['fieldset']['containers'] = array(
        '#type' => 'textfield',
        '#title' => t('Containers'),
        '#description' => t('Set containers for this server in the following format: asf|flv|mpeg|avi|ogg|mov;mp4;m4a;3gp;3g2;mj2|mp3.'),
        '#default_value' => $node->containers,
        '#required' => TRUE,
        '#maxlength' => mediamosa_server_db::CONTAINERS_LENGTH,
      );
    }
    if (in_array('object_code', $options)) {
      $form['fieldset']['object_code'] = array(
        '#type' => 'textarea',
        '#title' => t('Object code'),
        '#description' => t('{WIDTH}, {HEIGHT}, {HEIGHT_PLUS_20}, {MEDIAFILE_ID}, {TICKET_URI}, {AUTOPLAY} (true or false), {AUTOPLAY_NUM} (1 or 0), {IF_START}, {/IF_START}, {IF_DURATION}, {/IF_DURATION} are available for use in this field.'),
        '#default_value' => $node->object_code,
      );
    }
    if (in_array('server_name', $options)) {
      $form['fieldset']['server_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Server name'),
        '#description' => t('Name of server.'),
        '#default_value' => $node->server_name,
        '#required' => TRUE,
        '#maxlength' => mediamosa_server_db::SERVER_NAME_LENGTH,
      );
    }
    if (in_array('slots', $options)) {
      $form['fieldset']['slots'] = array(
        '#type' => 'select',
        '#options' => drupal_map_assoc(range(1, 64)),
        '#title' => t('Slots'),
        '#description' => t('The number of slots for this server.'),
        '#default_value' => $node->slots,
      );
    }
    if (in_array('tools', $options)) {
      $form['fieldset']['tools'] = array(
        '#type' => 'textfield', // @TODO: convert to select list?
        '#title' => t('Tools'),
        '#description' => t('Set tools for this server in the following format: ffmpeg|STILL|lin2win.'),
        '#default_value' => $node->tools,
        '#required' => TRUE,
        '#maxlength' => mediamosa_server_db::TOOLS_LENGTH,
      );
    }
    if (in_array('uri_upload_progress', $options)) {
      $form['fieldset']['uri_upload_progress'] = array(
        '#type' => 'textfield',
        '#title' => t('URI upload progress'),
        '#description' => t('Optional URI for client side upload progress information.'),
        '#default_value' => $node->uri_upload_progress,
        '#maxlength' => mediamosa_server_db::URI_UPLOAD_PROGRESS_LENGTH,
      );
    }
  }

  // New servers are disabled by default
  if (isset($node->nid)) {
    $form['fieldset']['server_status'] = array(
      '#type' => 'select',
      '#title' => t('Server status'),
      '#options' => array(1 => t('On'), 0 => t('Off')),
      '#description' => t('Availability of server.'),
      '#default_value' => $node->server_status,
    );
  }

  return $form;
}
*/

/**
 * Helper function to fetch the optional parameters per server type.
 */
function _mediamosa_server_get_server_options($server_type) {
  $form_elements = array();
  switch ($server_type) {
    case mediamosa_server_db::SERVER_TYPE_STILL:
    case mediamosa_server_db::SERVER_TYPE_DOWNLOAD:
      $form_elements = array('uri');
      break;

    case mediamosa_server_db::SERVER_TYPE_STREAMING:
      $form_elements = array('uri', 'containers', 'object_code');
      break;

    case mediamosa_server_db::SERVER_TYPE_JOB_PROCESSOR:
      $form_elements = array('server_name', 'uri', 'slots', 'tools');
      break;

    case mediamosa_server_db::SERVER_TYPE_UPLOAD:
      $form_elements = array('uri', 'uri_upload_progress');
      break;
  }

  return $form_elements;
}
