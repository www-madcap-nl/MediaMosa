<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2010 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

 /**
  * @file
  * Unit test for User / Group quota.
  * Coversion of;
  * trac_tickets_250
  */

class MediaMosaUserQuotaTestCaseEga extends MediaMosaTestCaseEga {

  // ------------------------------------------------------------------ Members.

  // ------------------------------------------------------------------ Functions.
  public static function getInfo() {
    return array(
      'name' => 'User/Group - extended quota tests',
      'description' => 'The user and group quota unit tests.',
      'group' => MEDIAMOSA_TEST_GROUP_MEDIAMOSA_CORE_USER,
    );
  }

  /**
   * Implements setUp().
   */
  protected function setUp() {
    // Run parent first so we are inside sandbox.
    // Call parent::setUp and preserve arguments.
    $args = func_get_args();

    // Create and setup the CORE module.
    $args = array_unique(array_merge(array('mediamosa_collection', 'mediamosa_user'), $args));
    call_user_func_array(array($this, 'parent::setUp'), $args);
  }

  // ------------------------------------------------------------------ Tests.
  public function testUserGroupQuota() {

    // Set up.
    $user_id = $this->randomName();
    $group_id = $this->randomName();

    $quotum = rand(100, 9999);
    $a_parameters = array(
      mediamosa_rest_call_group_create::QUOTUM => $quotum,
    );

    // Create group.
    $this->createGroup($group_id, $a_parameters);

    // Create user.
    $this->createUser($user_id, $a_parameters);

    // Create asset.
    $a_parameters = array(
      mediamosa_rest_call_asset_create::USER_ID => $user_id,
      mediamosa_rest_call_asset_create::GROUP_ID => $group_id,
    );
    $asset_id = $this->createAsset($a_parameters);

    // Create mediafile.
    $a_parameters = array(
      mediamosa_rest_call_create_mediafile::USER_ID => $user_id,
      mediamosa_rest_call_create_mediafile::GROUP_ID => $group_id,
    );
    $mediafile_id = $this->createMediafile($asset_id, $a_parameters);

    // Get user.
    $a_user = $this->getUser($user_id);

    // Check response.
    $this->assertTrue($a_user['user_diskspace_used_mb'] == 0, t('Must be 0 mb.'));
    $this->assertTrue($a_user['user_quota_mb'] == $quotum, t('Quotum has the good value.'));
    $this->assertTrue($a_user['quota_available_mb'] == $quotum, t('Available quotum has the good value.'));

    // Get group.
    $a_group = $this->getGroup($group_id);

    // Check response.
    $this->assertTrue($a_group['group_diskspace_used_mb'] == 0, t('Must be 0 mb.'));
    $this->assertTrue($a_group['group_quota_mb'] == $quotum, t('Quotum has the good value.'));
    $this->assertTrue($a_group['quota_available_mb'] == $quotum, t('Available quotum has the good value.'));

    // Test under and above quota cases.
    $testcases = array('true' => $quotum - 1, 'false' => $quotum + 1);
    foreach($testcases as $allowed => $filesize_mb) {
      // Set filesize.
      $filesize = $filesize_mb * 1024 * 1024; // in bytes

      // Create metadata.
      $a_parameters = array(
        mediamosa_asset_mediafile_metadata_db::FILESIZE => $filesize
      );
      mediamosa_asset_mediafile_metadata::create($mediafile_id, $a_parameters);

      // Get user.
      $a_user = $this->getUser($user_id);
      $this->var_export($a_user);

      // Check response.
      $this->assertTrue($a_user['user_diskspace_used_mb'] == $filesize_mb, t('Must be @filesize mb.', array('@filesize' => $filesize_mb)));
      $this->assertTrue($a_user['user_quota_mb'] == $quotum, t('Quotum has the good value.'));
      $this->assertTrue($a_user['quota_available_mb'] == $quotum - $filesize_mb, t('Available quotum has the good value.'));
      $this->assertTrue($a_user['user_over_quota'] == ($quotum - $filesize_mb < 0 ? 'true' : 'false'), t('User over quota boolean has the good value.'));

      // Get group.
      $a_group = $this->getGroup($group_id);
      $this->var_export($a_group);

      // Check response.
      $this->assertTrue($a_group['group_diskspace_used_mb'] == $filesize_mb, t('Must be @filesize mb.', array('@filesize' => $filesize_mb)));
      $this->assertTrue($a_group['group_quota_mb'] == $quotum, t('Quotum has the good value.'));
      $this->assertTrue($a_group['quota_available_mb'] == $quotum - $filesize_mb, t('Available quotum has the good value.'));
      $this->assertTrue($a_group['group_over_quota'] == ($quotum - $filesize_mb < 0 ? 'true' : 'false'), t('Group over quota boolean has the good value.'));

      // Create upload ticket.
      $a_parameters = array(
        mediamosa_rest_call_asset_mediafile_uploadticket_create::USER_ID => $user_id,
        mediamosa_rest_call_asset_mediafile_uploadticket_create::GROUP_ID => $group_id,
      );
      $a_expected_result_ids = array(
        $quotum - $filesize_mb >= 0 ? mediamosa_error::ERRORCODE_OKAY : mediamosa_error::ERRORCODE_NOT_ENOUGH_FREE_QUOTA
      );
      $a_uploadticket = $this->createMediafileUploadTicket($mediafile_id, $a_parameters, $a_expected_result_ids);

      // Delete metadata.
      mediamosa_asset_mediafile_metadata::delete_by_mediafileid($mediafile_id);
    }
  }
}
