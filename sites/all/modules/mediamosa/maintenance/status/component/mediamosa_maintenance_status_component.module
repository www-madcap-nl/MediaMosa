<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2010 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * The status commponent module.
 */

/**
 * Constants.
 */

/**
 * Warning level for available in Mb.
 */
define('MEDIAMOSA_MAINTENANCE_STATUS_COMPONENT_SPACE_WARNING', 100);


/**
 * Implements hook_mediamosa_status_generate().
 */
function mediamosa_maintenance_status_component_mediamosa_status_generate() {
  $results = array();

  $mount_point = mediamosa_configuration_storage::mount_point_get();

  $results['mount_is_set'] = array(
    'title' => t('SANNAS'),
    'value' => t('Mount is set'),
    'severity' => _mediamosa_maintenance_status_okerror(!$mount_point),
  );

  $results['mount_is_exists'] = array(
    'title' => t('SANNAS'),
    'value' => t('Mount is exists'),
    'severity' => _mediamosa_maintenance_status_okerror(!mediamosa_io::is_dir($mount_point)),
  );

  // Structure check.
  $checks = array(
    'is_structured' => array(),
    'is_writeable' => array(),
  );

  $dirs = array('data', 'data/stills', 'data/transcode', 'links', 'download_links', 'still_links', 'ftp');
  foreach ($dirs as $dir) {
    $checks = _mediamosa_maintenance_status_component_directory($mount_point . '/' . $dir, $checks);
  }

  $maps = array(
    '1','2','3','4','5','6','7','8','9',
    'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
    'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
  );
  foreach ($maps as $map) {
    _mediamosa_maintenance_status_component_directory($mount_point . '/data/' . $map, $checks);
    _mediamosa_maintenance_status_component_directory($mount_point . '/data/stills/' . $map, $checks);
  }

  $results['mount_structure'] = array(
    'title' => t('SANNAS'),
    'value' => t('Mount has the good structure'),
    'severity' => _mediamosa_maintenance_status_okerror($checks['is_structured']),
  );
  if (!empty($checks['is_structured'])) {
    $results['mount_structure']['description'] = '<pre>' . implode("\n", $checks['is_structured']) . '</pre>';
  }

  $results['mount_writeable'] = array(
    'title' => t('SANNAS'),
    'value' => t('Mount structure is writeable'),
    'severity' => _mediamosa_maintenance_status_okerror($checks['is_writeable']),
  );
  if (!empty($checks['is_writeable'])) {
    $results['mount_writeable']['description'] = '<pre>' . implode("\n", $checks['is_writeable']) . '</pre>';
  }

  $filename = $mount_point . '/data/transcode/test_' . mt_rand(0, 9999) . '.txt';
  $content = mt_rand(0, 9999);
  $handle = fopen($filename, 'w');
  fwrite($handle, $content);
  fclose($handle);
  $read_content = '';
  $handle = fopen($filename, 'rb');
  if ($handle) {
    $read_content = fread($handle, filesize($filename));
    fclose($handle);
  }
  unlink($filename);
  $results['mount_rea_write'] = array(
    'title' => t('SANNAS'),
    'value' => t('Write and read works fine'),
    'severity' => _mediamosa_maintenance_status_okerror($content != $read_content),
  );


  $available_bytes = disk_free_space($mount_point);
  $available_mb = floor($available_bytes / 1024 / 1024);
  $results['mount_disk_free'] = array(
    'title' => t('SANNAS'),
    'value' => t('Disk free space: @available Mb', array('@available' => $available_mb)),
    'severity' => ($available_mb <= MEDIAMOSA_MAINTENANCE_STATUS_COMPONENT_SPACE_WARNING ? MEDIAMOSA_MAINTENANCE_STATUS_RESULT_WARNING : ($available_bytes <= 0 ? MEDIAMOSA_MAINTENANCE_STATUS_RESULT_ERROR : MEDIAMOSA_MAINTENANCE_STATUS_RESULT_OK)),
  );

  $statuses = array(
    'component' => array(
      'title' => t('Component status'),
      'results' => $results,
    ),
  );

  return $statuses;
}

/**
 * Directory check helper.
 *
 * @param $directory string
 * @param $checks['is_structured'] string
 * @param $checks['is_writeable'] string
 */
function _mediamosa_maintenance_status_component_directory($directory, $checks) {
  if (!mediamosa_io::is_dir($directory)) {
    $checks['is_structured'][] = $directory;
  }
  if (!is_writable($directory)) {
    $checks['is_writeable'][] = $directory;
  }

  return $checks;
}

/**
 * Implements hook_mediamosa_status_collect().
 *
 * @param boolean $reset
 *  Reset the data, regenerate.
 *
 * @return array
 *   All the statuses in an array
 */
function mediamosa_maintenance_status_component_mediamosa_status_collect($reset = FALSE) {
  global $conf;

  $mediamosa_status_component = array();
  if (!$reset) {
    $mediamosa_status_component = variable_get('mediamosa_status_component_' . $conf['mediamosa_installation_id'], array());
  }

  if (empty($mediamosa_status_component)) {
    $mediamosa_status_component = array('time' => REQUEST_TIME, 'statuses' => mediamosa_maintenance_status_component_mediamosa_status_generate());
    variable_set('mediamosa_status_component_' . $conf['mediamosa_installation_id'], $mediamosa_status_component);
  }

  return $mediamosa_status_component['statuses'];
}
