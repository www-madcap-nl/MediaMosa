<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2010 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * The status commponent module.
 */

/**
 * Constants.
 */

/**
 * Warning level for available in Mb.
 */
define('MEDIAMOSA_MAINTENANCE_STATUS_COMPONENT_SPACE_WARNING', 100);


/**
 * Implements hook_mediamosa_status_generate().
 */
function mediamosa_maintenance_status_component_mediamosa_status_generate() {
  $results = array();

  $mount_point = mediamosa_configuration_storage::mount_point_get();

  $results['mount_is_set'] = array(
    'title' => t('SANNAS'),
    'value' => t('Mount is set'),
    'severity' => _mediamosa_maintenance_status_okerror(!$mount_point),
  );

  $results['mount_is_exists'] = array(
    'title' => t('SANNAS'),
    'value' => t('Mount is exists'),
    'severity' => _mediamosa_maintenance_status_okerror(!mediamosa_io::is_dir($mount_point)),
  );

  // Structure check.
  $is_structured = '';
  $is_writeable = '';
  mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/data');
  for ($i = 1; $i <= 9; $i++) {
    mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/data/' . $i);
  }
  for ($i = ord('a'); $i <= ord('z'); $i++) {
    mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/data/' . chr($i));
  }
  for ($i = ord('A'); $i <= ord('Z'); $i++) {
    mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/data/' . chr($i));
  }
  // data/stills.
  mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/data/stills');
  for ($i = 0; $i <= 9; $i++) {
    mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/data/stills/' . $i);
  }
  for ($i = ord('a'); $i <= ord('z'); $i++) {
    mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/data/stills/' . chr($i));
  }
  for ($i = ord('A'); $i <= ord('Z'); $i++) {
    mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/data/stills/' . chr($i));
  }
  // Other.
  mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/data/transcode');
  mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/links');
  mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/download_links');
  mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/still_links');
  mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $mount_point . '/ftp');
  $results['mount_structure'] = array(
    'title' => t('SANNAS'),
    'value' => t('Mount has the good structure'),
    'severity' => _mediamosa_maintenance_status_okerror($is_structured),
  );
  if ($is_structured) {
    $results['mount_structure']['description'] = '<pre>' . $is_structured . '</pre>';
  }
  $results['mount_writeable'] = array(
    'title' => t('SANNAS'),
    'value' => t('Mount structure is writeable'),
    'severity' => _mediamosa_maintenance_status_okerror($is_writeable),
  );
  if ($is_writeable) {
    $results['mount_writeable']['description'] = '<pre>' . $is_writeable . '</pre>';
  }


  $filename = $mount_point . '/data/transcode/test_' . mt_rand(0, 9999) . '.txt';
  $content = mt_rand(0, 9999);
  $handle = fopen($filename, 'w');
  fwrite($handle, $content);
  fclose($handle);
  $read_content = '';
  $handle = fopen($filename, "rb");
  if ($handle) {
    $read_content = fread($handle, filesize($filename));
    fclose($handle);
  }
  unlink($filename);
  $results['mount_rea_write'] = array(
    'title' => t('SANNAS'),
    'value' => t('Write and read works fine'),
    'severity' => _mediamosa_maintenance_status_okerror($content != $read_content),
  );


  $available_bytes = disk_free_space($mount_point);
  $available_mb = floor($available_bytes / 1024 / 1024);
  $results['mount_disk_free'] = array(
    'title' => t('SANNAS'),
    'value' => t('Disk free space: @available Mb', array('@available' => $available_mb)),
    'severity' => ($available_mb <= MEDIAMOSA_MAINTENANCE_STATUS_COMPONENT_SPACE_WARNING ? MEDIAMOSA_MAINTENANCE_STATUS_RESULT_WARNING : ($available_bytes <= 0 ? MEDIAMOSA_MAINTENANCE_STATUS_RESULT_ERROR : MEDIAMOSA_MAINTENANCE_STATUS_RESULT_OK)),
  );

  $statuses = array(
    'component' => array(
      'title' => t('Component status'),
      'results' => $results,
    ),
  );

  return $statuses;
}

/**
 * Directory check helper.
 *
 * @param $is_structured string
 * @param $is_writeable string
 * @param $directory string
 */
function mediamosa_maintenance_status_component_directory(&$is_structured, &$is_writeable, $directory) {
  if (!mediamosa_io::is_dir($directory)) {
    $is_structured .= $directory . "\n";
  }
  if (!is_writable($directory)) {
    $is_writeable .= $directory . "\n";
  }
}

/**
 * Implements hook_mediamosa_status_collect().
 *
 * @param reset boolean
 * @param with_variable boolean
 *   Use Drupal variables or not
 *
 * @return array
 *   All the statuses in an array
 */
function mediamosa_maintenance_status_component_mediamosa_status_collect($reset = FALSE) {
  global $conf;

  $mediamosa_status_component = array();
  if (!$reset) {
    $mediamosa_status_component = variable_get('mediamosa_status_component_' . $conf['mediamosa_installation_id'], array());

    if (empty($mediamosa_status_component['time']) || abs($mediamosa_status_component['time'] - REQUEST_TIME) > mediamosa_settings::MEDIAMOSA_COMPONENT_STATUS_TIMEOUT) {
      $mediamosa_status_component = array();
    }
  }

  if (empty($mediamosa_status_component)) {
    $mediamosa_status_component = array('time' => REQUEST_TIME, 'statuses' => mediamosa_maintenance_status_component_mediamosa_status_generate());
    variable_set('mediamosa_status_component_' . $conf['mediamosa_installation_id'], $mediamosa_status_component);
  }

  return $mediamosa_status_component['statuses'];
}
