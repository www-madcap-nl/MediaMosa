<?php
// $Id$

/**
 * MediaMosa is Open Source Software to build a Full Featured, Webservice
 * Oriented Media Management and Distribution platform (http://mediamosa.org)
 *
 * Copyright (C) 2010 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * The main maintenance module.
 */

/**
 * Implements hook_menu().
 */
function mediamosa_maintenance_menu() {
  $items = array();

  // Maintenance / Configuration pages.
  $items['admin/mediamosa'] = array(
    'title' => 'MediaMosa',
    'page callback' => '_mediamosa_maintenance_status',
    'access arguments' => array('access mediamosa'),
    'weight' => -20,
    'position' => ''
  );
  $items['admin/mediamosa/mediamosa'] = array(
    'title' => 'Status',
    'access arguments' => array('access mediamosa'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  $items['admin/mediamosa/mediamosa/%/details'] = array(
    'title' => 'Details of status unit test results.',
    'description' => 'This page displays a list of the 150 latest created collections.',
    'page callback' => '_mediamosa_maintenance_status_details',
    'page arguments' => array(3),
    'access arguments' => array('access mediamosa'),
    'type' => MENU_CALLBACK,
    'file' => 'simpletest.pages.inc',
    'file path' => drupal_get_path('module', 'simpletest'),
  );

  $items['admin/mediamosa/browse'] = array(
    'title' => 'Browse',
    'access arguments' => array('access mediamosa'),
    'page callback' => '_mediamosa_maintenance_admin_page',
    'page arguments' => array('admin/mediamosa/browse'),
    'file' => 'mediamosa_maintenance.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/mediamosa/browse/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'mediamosa_maintenance.admin.inc',
  );
  $items['admin/mediamosa/config'] = array(
    'title' => 'Configuration',
    'access arguments' => array('access mediamosa'),
    'page callback' => '_mediamosa_maintenance_admin_page',
    'page arguments' => array('admin/mediamosa/config'),
    'file' => 'mediamosa_maintenance.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/mediamosa/config/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'mediamosa_maintenance.admin.inc',
  );

  $items['admin/mediamosa/asset/%/mediafile/%/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_maintenance_mediafile_delete', 3, 5),
    'access arguments' => array(mediamosa_settings::MEDIAMOSA_PERMISSION_DELETE_MEDIAMOSA_MEDIAFILES),
    'type' => MENU_CALLBACK,
    'file' => 'mediamosa_maintenance.admin.inc',
  );
  $items['admin/mediamosa/asset/%/mediafile/%/analyse'] = array(
    'page callback' => 'mediamosa_maintenance_mediafile_analyse',
    'page arguments' => array(3,5),
    'access arguments' => array(mediamosa_settings::MEDIAMOSA_PERMISSION_ANALYSE_MEDIAMOSA_MEDIAFILES),
    'type' => MENU_CALLBACK,
    'file' => 'mediamosa_maintenance.admin.inc',
  );
  $items['admin/mediamosa/asset/%/mediafile/%/download'] = array(
    'page callback' => 'mediamosa_maintenance_mediafile_download',
    'page arguments' => array(3,5),
    'access arguments' => array(mediamosa_settings::MEDIAMOSA_PERMISSION_DOWNLOAD_MEDIAMOSA_MEDIAFILES),
    'type' => MENU_CALLBACK,
    'file' => 'mediamosa_maintenance.admin.inc',
  );
  $items['admin/mediamosa/asset/%/job/%/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediamosa_maintenance_job_delete', 3, 5),
    'access arguments' => array(mediamosa_settings::MEDIAMOSA_PERMISSION_DELETE_MEDIAMOSA_MEDIAFILES),
    'type' => MENU_CALLBACK,
    'file' => 'mediamosa_maintenance.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function mediamosa_maintenance_help($path, $arg) {
  global $base_url;

  switch ($path) {
    case 'admin/mediamosa':
      return '<p>' . t('MediaMosa status page show results of basic unit tests that are run at fixed intervals. All tests must be green.') . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function mediamosa_maintenance_theme() {
  return array(
    'mediamosa_maintenance_date' => array(
      'variables' => array(
        'datetime' => NULL,
        'timestamp' => NULL,
        'type' => 'short',
      ),
      'file' => 'mediamosa_maintenance.admin.inc',
    ),
    'mediamosa_maintenance_table' => array(
      'variables' => array(
        // Table
        'header' => NULL,
        'rows' => NULL,
        'attributes' => array(),
        'caption' => NULL,
        'colgroups' => array(),
        'sticky' => TRUE,
        'empty' => '',
        // Pager (optional)
        'page' => 0,
        'item_count_total' => 0,
        'item_limit' => mediamosa_settings::maintenance_items_per_page(),
        'element' => 0,
        'quantity' => 10,
        // Note (small font, bottom right).
        'note' => NULL,
        // caption bottom, right.
        'caption_bottom' => NULL,
        // Title, description (top).
        'title' => NULL,
        'description' => NULL,
      ),
      'file' => 'mediamosa_maintenance.admin.inc',
    ),
    'mediamosa_maintenance_pager' => array(
      'variables' => array(
        'page' => 0,
        'item_count_total' => 0,
        'item_limit' => mediamosa_settings::maintenance_items_per_page(),
        'element' => 0,
        'quantity' => 10,
      ),
      'file' => 'mediamosa_maintenance.admin.inc',
    ),
    // Create a link to a collection.
    'l_mediamosa_collection' => array(
      'variables' => array(
        'id' => 0,
        'title' => t('<collection has no title>'),
      ),
      'file' => 'mediamosa_maintenance.admin.inc',
    ),
    // Create a link to a collection.
    'l_mediamosa_asset' => array(
      'variables' => array(
        'id' => 0,
        'title' => t('<asset has no title>'),
      ),
      'file' => 'mediamosa_maintenance.admin.inc',
    ),
  );
}

/**
 * Generate the status page.
 */
function _mediamosa_maintenance_status() {

  // If we are set as Home page, the breadcrumb isnt set, lets do it here.
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb[] = l(t('Administer'), 'admin');
  $breadcrumb[] = l(t('MediaMosa'), 'admin/mediamosa');
  drupal_set_breadcrumb($breadcrumb);

  if (!module_exists('mediamosa_maintenance_status')) {
    return t('Status page disabled, enable status module.');
  }

  // Need the classes of simpletest.
  drupal_add_css(drupal_get_path('module', 'simpletest') . '/simpletest.css');

  // Get the result.
  $tests = mediamosa_maintenance_status::get_test_results();
  $tests = isset($tests['tests']) ? $tests['tests'] : array();

  // Get all tests.
  $all_tests = mediamosa_maintenance_status::get_default_tests();

  // Default.
  $show_tests = mediamosa_settings::MEDIAMOSA_RUN_15_MINUTES;

  $header = array(
    array('data' => t('Component')),
    array('data' => t('Test')),
    array('data' => t('Result')),
    array('data' => t('TTR (seconds)')),
    array('data' => t('Last run')),
  );

  $rows = array();

  if (isset($all_tests[$show_tests])) {
    foreach ($all_tests[$show_tests] as $name => $test_description) {
      $class = 'simpletest-pass';

      if (!isset($tests[$show_tests][$name])) {
        $result = t('Has not run.');
        $time = 'N/A';
        $time_started = 'N/A';
        $class = 'simpletest-fail';
      }
      else {
        // Get the result.
        $test = $tests[$show_tests][$name];

        if (!isset($test['results']) || empty($test['results'])) {
          $test['results'] = array(
            'fail' => 0,
            'exception' => 0,
            'pass' => 0,
          );

          $test['ended'] = $test['started'] = 0;
        }

        if ($test['results']['fail'] > 0 || $test['results']['exception'] > 0 || $test['results']['pass'] == 0) {
          $class = 'simpletest-fail';
        }

        switch ($test['runphase']) {
          case mediamosa_maintenance_status::RUNPHASE_TIMED_OUT:
            $result = t('Test has timed out.');
            break;
          case mediamosa_maintenance_status::RUNPHASE_FAILED:
            $result = t('Test has failed to run.');
            break;

          default:
            // Set the result.
            $result = l(t('Passes: (!passes), Failures: (!failures), Exceptions: (!exceptions)',
              array(
                '!passes' => $test['results']['pass'],
                '!failures' => $test['results']['fail'],
                '!exceptions' => $test['results']['exception'],
              )),
              'admin/mediamosa/mediamosa/' . $name . '/details'
            );
            break;
        }

        if ($test['runphase'] == mediamosa_maintenance_status::RUNPHASE_STARTED) {
          $result .= '<br /><small>(test is currently running)</small>';
        }

        $time = round($test['ended'] - $test['started'], 2);
        $time_started = theme('mediamosa_maintenance_date', array('timestamp' => round($test['started'])));
      }

      $rows[] = array(
        'data' => array(
          $test_description['group'],
          $test_description['name'],
          $result,
          $time,
          $time_started,
        ),
        'class' => array($class)
      );
    }
  }

  // theme de arrays naar een tabel
  $content = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No status information found, please check if cron is working properly.'));

  // Check if enabled.
  if (!variable_get('mediamosa_status_run_tests', TRUE)) {
    $content .= '<p>' . t('Warning: update on tests has been turned off, enable on the !page', array('!page' => l('configure page', 'admin/mediamosa/config/global'))) . '</p>';
  }

  return $content;
}

/**
 * Implements hook_enable().
 */
function mediamosa_maintenance_enable() {

  // FIXME: need to throw away the admin menu so we can rebuild our menu when
  //        other child menu modules where enabled earlier than ours. This might
  //        be fixed in later version of drupal 7.

  // Remove us so we are rebuild properly.
  db_delete('menu_links')
    ->condition('link_path', 'admin/mediamosa%', 'LIKE')
    ->execute();

  // Rebuild.
  menu_rebuild();
}

/**
 * Show details of a status unittest.
 */
function _mediamosa_maintenance_status_details($name) {

  // If we are set as Home page, the breadcrumb isnt set, lets do it here.
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb[] = l(t('Administer'), 'admin');
  $breadcrumb[] = l(t('MediaMosa'), 'admin/mediamosa');
  drupal_set_breadcrumb($breadcrumb);

  // Load all classes and include CSS.
  drupal_add_css(drupal_get_path('module', 'simpletest') . '/simpletest.css');

  // Header
  $header = array(t('Message'), t('Group'), t('Filename'), t('Line'), t('Function'), array('colspan' => 2, 'data' => t('Status')));

  // Get the result.
  $tests = mediamosa_maintenance_status::get_test_results();
  $tests = isset($tests['tests']) ? $tests['tests'] : array();

  // Find it.
  $found_test = NULL;
  foreach ($tests as $group) {
    foreach ($group as $name_test => $test) {
      if ($name_test == $name) {
        $found_test = $test;
        break;
      }
    }

    if (isset($found_test)) {
      break;
    }
  }

  $rows = array();
  if (isset($found_test)) {
    foreach ($found_test['assertions']['assertion'] as $assertion) {
      $row = array();
      $row[] = $assertion['message'];
      $row[] = $assertion['message_group'];
      $row[] = basename($assertion['file']);
      $row[] = $assertion['line'];
      $row[] = $assertion['function'];
      $row[] = simpletest_result_status_image($assertion['status']);

      $class = 'simpletest-' . $assertion['status'];
      if ($assertion['message_group'] == 'Debug') {
        $class = 'simpletest-debug';
      }
      $rows[] = array('data' => $row, 'class' => array($class));

      //$group_summary['#' . $assertion->status]++;
      //$form['result']['summary']['#' . $assertion->status]++;
    }
  }

  $content = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No status information found.'));

  return $content;
}
