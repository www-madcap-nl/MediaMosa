<?php
// $Id$

/**
 * MediaMosa is a Full Featured, Webservice Oriented Media Management and
 * Distribution platform (http://www.vpcore.nl)
 *
 * Copyright (C) 2009 SURFnet BV (http://www.surfnet.nl) and Kennisnet
 * (http://www.kennisnet.nl)
 *
 * MediaMosa is based on the open source Drupal platform and
 * was originally developed by Madcap BV (http://www.madcap.nl)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, you can find it at:
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 */

/**
 * @file
 * Installer for migration.
 */

/**
 * Use 'mig_memo' in database array in settings.php for source database.
 * Use 'mig_memo_data' in database array in settings.php for source database.
 */

/*
 * Example for settings.php.
// Migration memo 1.0 databases;
$databases['mig_memo']['default'] = array(
  'driver' => 'mysql',
  'database' => 'memo',
  'username' => 'memo',
  'password' => 'memo',
  'host' => 'localhost'
);
$databases['mig_memo_data']['default'] = array(
  'driver' => 'mysql',
  'database' => 'memo_data',
  'username' => 'memo',
  'password' => 'memo',
  'host' => 'localhost'
);
 */

define('MIG_MEMO_DATA', 'mig_memo_data');
define('MIG_MEMO', 'mig_memo');

/**
 * Get the database name of the mediamosa drupal database.
 *
 * @return string
 */
function _mediamosa_migration_get_memo_db() {
  return 'memo';
}

/**
 * Get the database name of the mediamosa data database.
 *
 * @return string
 */
function _mediamosa_migration_get_memo_data_db() {
  return 'memo_data';
}

/**
 * Implement hook_requirements().
 */
function mediamosa_migration_requirements($phase) {
  $requirements = array();

  // Ensure translations don't break at install time.
  $t = get_t();

  if ($phase != 'install') {
    $requirements['mediamosa2'] = array(
      'title' => $t('Migration Requirements'),
      'severity' => REQUIREMENT_INFO
    );
  }
  else {
    // Allowed.
    $requirements['mediamosa2'] = array(
      'title' => $t('Migration Requirements'),
      'description' => $t('Mediamosa 1.x installation found.'),
      'severity' => REQUIREMENT_INFO,
    );

    // These tables are required on the destination database.
    $a_table_names_dest_exists = array(
      'mediamosa_error',
    );
    // These tables (dest) must be empty.
    $a_table_names_dest_empty = array(
      'mediamosa_asset',
    );
    // Must exists source drupal db.
    $a_table_names_source_exists = array(
      'error',
    );
    // Must exists source data db.
    $a_table_names_source_exists_data = array(
    );

    $old_db = 'default';
    try {
      _mediamosa_migration_tables_exists($a_table_names_dest_exists);

      // Select the old mediamosa database.
      $old_db = db_set_active(MIG_MEMO_DATA);

      // Data source.
      _mediamosa_migration_tables_exists($a_table_names_source_exists_data, MIG_MEMO_DATA);

      // Back to other.
      db_set_active($old_db);

      // Select the old mediamosa database.
      $old_db = db_set_active(MIG_MEMO);
      _mediamosa_migration_tables_exists($a_table_names_source_exists, MIG_MEMO);

      // Back to other.
      db_set_active($old_db);

      // Make sure we start fresh.
      _mediamosa_migration_empty_tables($a_table_names_dest_empty);

    }
    catch (Exception $e) {
      // Back to default.
      db_set_active($old_db);

      // Log it.
      watchdog('installation', 'Migration of mediamosa 1.x to 2.0 failed; @reason.', array('@reason' => $e->getMessage()));

      $requirements['mediamosa2'] = array(
        'title' => $t('Migration Requirements'),
        'description' => $t('No (valid) mediamosa 1.x installation found, reason; @reason.', array('@reason' => $e->getMessage())),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }

  return $requirements;
}

/**
 * Implement hook_install().
 */
function mediamosa_migration_install() {
  // error -> mediamosa_error.
  _mediamosa_migration_error();

  // client_applications -> mediamosa_app.
  _mediamosa_migration_client_applications();

  // asset -> mediamosa_asset.
  _mediamosa_migration_asset();

  // mediafile -> mediamosa_asset_media.
  _mediamosa_migration_media();
}

/**
 * Implement hook_uninstall().
 */
function mediamosa_migration_uninstall() {

}

/**
 * Check if a table exists in current database.
 */
function _mediamosa_db_table_exists($table_name, $key = 'default') {
  $info = Database::getConnectionInfo($key);

  $schema = $info['default']['database'];

  $condition = new DatabaseCondition('AND');
  $condition->condition('table_catalog', NULL, 'IS');
  $condition->condition('table_schema', $schema);
  $condition->condition('table_name', Database::getConnection('default', $key)->prefixTables('{' . $table_name . '}'));
  $condition->compile(Database::getConnection($key), Database::getConnection('default', $key)->schema());

  return db_query("SELECT table_name FROM information_schema.tables WHERE " . (string)$condition, $condition->arguments())->fetchField();
}

/**
 * Loop through table names and check if they exists.
 *
 * @param array $a_table_names
 */
function _mediamosa_migration_tables_exists($a_table_names, $key = 'default') {
  // Ensure translations don't break at install time.
  $t = get_t();

  foreach ($a_table_names as $table_name) {
    if (!_mediamosa_db_table_exists($table_name, $key)) {
      throw new Exception($t("The table '@table_name' does not exists.", array('@table_name' => $table_name)));
    }
  }
}

/**
 * Loop through table names and check if they exists.
 *
 * @param array $a_table_names
 */
function _mediamosa_migration_empty_tables($a_table_names, $key = 'default') {
  $old_db = db_set_active($key);

  // Ensure translations don't break at install time.
  $t = get_t();

  try {
    foreach ($a_table_names as $table_name) {
      $count = db_query('SELECT COUNT(*) FROM ' . $table_name)->fetchField();

      if ($count) {
        throw new Exception($t("The table '@table_name' must be empty.", array('@table_name' => $table_name)));
      }
    }
  }
  catch(Exception $e) {
    db_set_active($old_db);
    throw $e;
  }

  db_set_active($old_db);
}

/**
 * Migrate the error table.
 */
function _mediamosa_migration_error() {
  // Get the database name.
  $db_name = _mediamosa_migration_get_memo_db();

  $current_ids = array_keys(db_query("SELECT code FROM {mediamosa_error}")->fetchAllAssoc('code'));

  // Copy all to new table.
  db_query(strtr("INSERT INTO {mediamosa_error} (name, code, message) (SELECT name, code, message FROM #db_name.error#whereORDER BY code ASC)",
    array(
      '#db_name' => $db_name,
      '#where' => count($current_ids) ? ' WHERE code NOT IN(' . implode(',', $current_ids) . ') ' : ' ',
    )
  ));
}

/**
 * Migrate the client_applications table.
 */
function _mediamosa_migration_client_applications() {
  // Get the database name.
  $db_name = _mediamosa_migration_get_memo_db();

  // Get current app_ids so we dont insert more than once.
  $current_app_ids = array_keys(db_query("SELECT * FROM {mediamosa_app}")->fetchAllAssoc('app_id'));

  // Get the current apps.
  $migrate_apps = db_query(strtr("SELECT * FROM {#db_name.client_applications} ORDER BY caid ASC", array('#db_name' => $db_name)))->fetchAllAssoc('id');

  foreach ($migrate_apps as $app_id => $migrate_app) {
    if (in_array($app_id, $current_app_ids)) {
      continue;
    }

    db_query("INSERT INTO {mediamosa_app} SET " .
      implode(",",
        array(
          'name = :name',
          'app_id = :app_id',
          'transcoding_position_from = :transcoding_position_from',
          'transcoding_position_to = :transcoding_position_to',
          'quota = :quota',
          'quota_used = :quota_used',
          'shared_key = :shared_key',
          'active = :active',
          'description = :description',
          'owner = :owner',
          'technical_name = :technical_name',
          'technical_phone = :technical_phone',
          'technical_email = :technical_email',
          'administrative_name = :administrative_name',
          'administrative_phone = :administrative_phone',
          'administrative_email = :administrative_email',
          'play_proxy_url = :play_proxy_url',
          'view_asset_url = :view_asset_url',
          'preview_profile_id = :preview_profile_id',
          'download_url = :download_url',
          'stream_url = :stream_url',
          'always_hint_mp4 = :always_hint_mp4',
          'always_insert_md = :always_insert_md',
          'is_metadata_public = :is_metadata_public',
          'show_external_assets = :show_external_assets',
          'active_version = :active_version',
          'transcoding_max_slots = :transcoding_max_slots',
          'allow_masterslave = :allow_masterslave',
        )
      ),
      array(
        'name' => $migrate_app->name,
        'app_id' => $migrate_app->id,
        'transcoding_position_from' => $migrate_app->transcoding_position_from,
        'transcoding_position_to' => $migrate_app->transcoding_position_to,
        'quota' => $migrate_app->quota,
        'quota_used' => $migrate_app->quota_used,
        'shared_key' => $migrate_app->shared_key,
        'active' => $migrate_app->active ? 'TRUE' : 'FALSE',
        'description' => $migrate_app->description,
        'owner' => $migrate_app->owner,
        'technical_name' => $migrate_app->technical_name,
        'technical_phone' => $migrate_app->technical_phone,
        'technical_email' => $migrate_app->technical_email,
        'administrative_name' => $migrate_app->administrative_name,
        'administrative_phone' => $migrate_app->administrative_phone,
        'administrative_email' => $migrate_app->administrative_email,
        'play_proxy_url' => $migrate_app->play_proxy_url,
        'view_asset_url' => $migrate_app->view_asset_url,
        'preview_profile_id' => $migrate_app->preview_profile_id,
        'download_url' => $migrate_app->download_url,
        'stream_url' => $migrate_app->stream_url,
        'always_hint_mp4' => $migrate_app->always_hint_mp4,
        'always_insert_md' => $migrate_app->always_insert_md,
        'is_metadata_public' => $migrate_app->is_metadata_public,
        'show_external_assets' => $migrate_app->show_external_assets,
        'active_version' => $migrate_app->active_version,
        'transcoding_max_slots' => (int)$migrate_app->transcoding_max_slots,
        'allow_masterslave' => $migrate_app->allow_masterslave,
      )
    );
  }
}

/**
 * Migrate the asset table.
 */
function _mediamosa_migration_asset() {
  // Get the database name.
  $db_name = _mediamosa_migration_get_memo_data_db();

  // The mediamosa_asset table should be empty (its checked as requirement).
  db_query(strtr(
    "INSERT INTO {mediamosa_asset}
      (
        asset_id,
        parent_id,
        app_id,
        provider_id,
        owner_id,
        group_id,
        videotimestamp,
        videotimestampmodified,
        play_restriction_start,
        play_restriction_end,
        is_locked,
        reference_id,
        is_private,
        mediafile_duration,
        mediafile_container_type,
        has_streamable_mediafiles,
        created,
        changed,
        is_unappropiate,
        is_external,
        is_empty_asset,
        viewed,
        played,
        is_protected
      ) (SELECT
        asset_id,
        parent_id,
        app_id,
        provider_id,
        owner_id,
        group_id,
        videotimestamp,
        videotimestampmodified,
        play_restriction_start,
        play_restriction_end,
        locked,
        reference_id,
        isprivate,
        mediafile_duration,
        mediafile_container_type,
        has_streamable_mediafiles,
        created,
        changed,
        is_unappropiate,
        is_external,
        is_empty_asset,
        viewed,
        played,
        is_protected
      FROM #db_name.asset ORDER BY parent_id, asset_id ASC)",
    array(
      '#db_name' => $db_name
    ))
  );
}

/**
 * Migrate the mediadfile table.
 *//*
function _mediamosa_migration_media() {
  // Get the database name.
  $db_name = _mediamosa_migration_get_memo_data_db();

  // The mediamosa_asset_media table should be empty (its checked as requirement).
  db_query(strtr(
    "INSERT INTO {mediamosa_asset_media}
      (
        mediafile_id,
        asset_id,
        asset_id_root,
        media_is_source,
        app_id,
        owner_id,
        group_id,
        is_original_file,
        is_downloadable,
        is_streamable,
        filename,
        uri,
        sannas_mount_point,
        transcode_profile_id,
        tool,
        command,
        file_extension,
        is_protected,
        created,
        changed,
        transcode_inherits_acl,
        type
      ) (SELECT
        mediafile_id,
        asset_id,
        asset_id_root,
        mediafile_source,
        app_id,
        owner_id,
        group_id,
        is_original_file,
        is_downloadable,
        is_streamable,
        filename,
        uri,
        sannas_mount_point,
        transcode_profile_id,
        tool,
        command,
        file_extension,
        is_protected,
        created,
        changed,
        transcode_inherits_acl,
        type
      FROM #db_name.mediafile ORDER BY asset_id ASC)",
    array(
      '#db_name' => $db_name
    ))
  );
}*/
